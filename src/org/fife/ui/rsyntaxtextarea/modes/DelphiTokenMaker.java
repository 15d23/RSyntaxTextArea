/* The following code was generated by JFlex 1.4.1 on 7/28/09 5:40 PM */

/*
 * 7/28/2009
 *
 * DelphiTokenMaker.java - Scanner for the Delphi programming language.
 * Copyright (C) 2009 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Delphi programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated DelphiTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class DelphiTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\1\0\1\12\1\7\22\0\1\12\1\36\1\7"+
    "\1\10\1\1\1\36\1\36\1\13\2\35\1\42\1\23\1\36\1\23"+
    "\1\24\1\16\1\4\7\6\2\3\1\41\1\36\1\40\1\42\1\40"+
    "\1\36\1\37\3\5\1\21\1\22\1\21\5\1\1\20\13\1\1\17"+
    "\2\1\1\35\1\0\1\35\1\40\1\2\1\0\1\32\1\51\1\54"+
    "\1\56\1\30\1\31\1\52\1\43\1\45\1\62\1\63\1\33\1\50"+
    "\1\53\1\55\1\44\1\64\1\26\1\34\1\25\1\27\1\57\1\46"+
    "\1\60\1\47\1\61\1\14\1\7\1\15\1\36\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\11\2\1\12\1\11\14\2\1\13"+
    "\1\14\1\15\4\13\1\16\3\13\1\17\1\3\1\20"+
    "\1\17\1\20\1\17\1\21\1\17\1\22\1\23\3\2"+
    "\1\24\15\2\1\24\20\2\1\24\31\2\1\24\3\2"+
    "\10\0\1\20\1\0\2\21\22\2\1\25\2\2\1\24"+
    "\73\2\1\24\1\2\10\0\1\26\1\2\1\27\1\25"+
    "\56\2\1\27\2\2\1\25\16\2\2\0\1\30\2\0"+
    "\1\31\13\2\1\24\40\2\1\24\10\2\4\0\10\2"+
    "\1\25\65\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u0173\0\u01dd\0\u0212\0\u0173\0\u0247\0\u0173\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0173\0\237\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u0173"+
    "\0\u0173\0\u070a\0\u073f\0\u0774\0\u07a9\0\u0173\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u087d\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u0173\0\u0173\0\u09bb\0\u09f0\0\u0a25\0\324\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u087d\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\u1c92\0\324\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120"+
    "\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8"+
    "\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470"+
    "\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618"+
    "\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0"+
    "\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968"+
    "\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10"+
    "\0\u2b45\0\u2b7a\0\324\0\u2baf\0\324\0\u2be4\0\u2c19\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e"+
    "\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146"+
    "\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee"+
    "\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496"+
    "\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e"+
    "\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6"+
    "\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e"+
    "\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36"+
    "\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde"+
    "\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86"+
    "\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e"+
    "\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6"+
    "\0\u420b\0\u4240\0\u4275\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e"+
    "\0\u381b\0\u43b3\0\u43e8\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1"+
    "\0\u4526\0\u455b\0\u39c3\0\u4590\0\u3a62\0\u45c5\0\u45fa\0\u462f"+
    "\0\u4664\0\u4699\0\u46ce\0\u4703\0\u4738\0\u1b54\0\u476d\0\u47a2"+
    "\0\u47d7\0\u480c\0\u4841\0\u4876\0\u48ab\0\u48e0\0\u4915\0\u494a"+
    "\0\u497f\0\u49b4\0\u49e9\0\u4a1e\0\u4a53\0\u4a88\0\u4abd\0\u4af2"+
    "\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30\0\u4c65\0\u4c9a"+
    "\0\u4ccf\0\u4d04\0\u4d39\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42"+
    "\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u4f80\0\u4fb5\0\u4fea"+
    "\0\u501f\0\u5054\0\u5089\0\u50be\0\u50f3\0\u5128\0\u515d\0\u5192"+
    "\0\u51c7\0\u51fc\0\u5231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\10\1\16\4\5\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\10\1\32\3\17\1\5\1\33\1\34"+
    "\1\35\1\5\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\4\5\11\47\1\50\3\47\1\51"+
    "\13\47\1\52\11\47\1\53\2\47\1\54\16\47\11\55"+
    "\1\56\17\55\1\57\11\55\1\60\2\55\1\61\16\55"+
    "\7\4\1\0\1\4\6\0\4\4\2\0\10\4\2\0"+
    "\1\4\3\0\23\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\22\5\3\62\2\6"+
    "\1\62\1\6\1\0\1\62\6\0\1\62\1\63\1\64"+
    "\1\65\1\0\1\66\3\62\1\65\1\64\1\62\1\63"+
    "\1\62\2\0\1\62\3\0\13\62\1\64\11\62\1\67"+
    "\1\70\1\62\1\70\1\0\1\62\6\0\1\71\1\63"+
    "\1\64\1\65\1\0\1\66\3\62\1\65\1\64\1\62"+
    "\1\63\1\62\2\0\1\62\3\0\13\62\1\64\1\62"+
    "\1\71\4\62\65\0\3\4\2\11\1\4\1\11\1\0"+
    "\1\4\6\0\4\4\2\0\10\4\2\0\1\4\3\0"+
    "\22\4\12\0\1\13\52\0\13\14\1\72\51\14\16\0"+
    "\1\73\51\0\2\66\1\0\1\66\56\0\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\5\1\74\6\5"+
    "\2\0\1\4\3\0\1\75\3\5\1\76\5\5\1\77"+
    "\7\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\3\5\1\100\1\5\1\101\2\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\7\5\1\102\2\0\1\4\3\0\10\5\1\103\11\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\6\5"+
    "\1\104\1\5\2\0\1\4\3\0\10\5\1\105\4\5"+
    "\1\106\4\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\2\5\1\107\2\5\1\110\2\5\2\0\1\4"+
    "\3\0\2\5\1\111\7\5\1\112\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\77\1\113\1\114"+
    "\4\5\1\115\2\0\1\4\3\0\6\5\1\116\13\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\5\5"+
    "\1\117\2\5\2\0\1\4\3\0\2\5\1\120\7\5"+
    "\1\121\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\122\2\5\1\123\1\5\1\124\2\5\2\0"+
    "\1\4\3\0\1\125\1\5\1\126\2\5\1\127\14\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\5"+
    "\1\130\1\131\2\5\1\132\1\133\1\5\2\0\1\4"+
    "\3\0\12\5\1\134\7\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\4\5\1\77\2\5\1\77\2\0"+
    "\1\4\3\0\5\5\1\135\2\5\1\136\11\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\5\1\137"+
    "\6\5\2\0\1\4\3\0\1\140\1\5\1\141\7\5"+
    "\1\142\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\143\4\5\2\0\1\4\3\0\12\5"+
    "\1\105\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\144\4\5\2\0\1\4\3\0\4\5"+
    "\1\145\5\5\1\146\7\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\12\5"+
    "\1\147\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\150\1\5\1\151\2\5\2\0\1\4"+
    "\3\0\2\5\1\152\7\5\1\153\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\2\5\1\154\2\5"+
    "\1\155\1\156\1\5\2\0\1\4\3\0\1\157\11\5"+
    "\1\160\1\161\6\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\5\1\77\1\162\1\5\1\77\3\5"+
    "\2\0\1\4\3\0\6\5\1\163\1\5\1\77\3\5"+
    "\1\164\5\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\165\4\5\2\0\1\4\3\0\2\5"+
    "\1\166\1\5\1\167\5\5\1\170\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\171\2\5"+
    "\2\0\1\4\3\0\2\5\1\172\17\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\12\5\1\173\7\5\11\47\1\0\3\47\1\0"+
    "\13\47\1\0\11\47\1\0\2\47\1\0\16\47\25\0"+
    "\1\174\17\0\1\175\44\0\1\176\105\0\1\177\16\0"+
    "\11\55\1\0\17\55\1\0\11\55\1\0\2\55\1\0"+
    "\16\55\25\0\1\200\17\0\1\201\44\0\1\202\105\0"+
    "\1\203\16\0\7\62\1\0\1\62\6\0\4\62\2\0"+
    "\10\62\2\0\1\62\3\0\25\62\2\204\1\62\1\204"+
    "\1\0\1\62\6\0\4\62\1\205\1\0\10\62\2\0"+
    "\1\62\3\0\25\62\2\66\1\62\1\66\1\0\1\62"+
    "\6\0\2\62\1\64\1\65\2\0\3\62\1\65\1\64"+
    "\3\62\2\0\1\62\3\0\13\62\1\64\11\62\2\67"+
    "\1\62\1\67\1\0\1\62\6\0\2\62\1\64\1\65"+
    "\1\0\1\66\3\62\1\65\1\64\3\62\2\0\1\62"+
    "\3\0\13\62\1\64\11\62\1\67\1\70\1\62\1\70"+
    "\1\0\1\62\6\0\1\62\1\206\1\64\1\65\1\0"+
    "\1\66\3\62\1\65\1\64\1\62\1\206\1\62\2\0"+
    "\1\62\3\0\13\62\1\64\11\62\4\207\1\0\1\62"+
    "\6\0\2\62\2\207\2\0\3\62\3\207\2\62\2\0"+
    "\1\62\3\0\6\62\1\207\2\62\1\207\1\62\1\207"+
    "\6\62\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\2\5\1\210\5\5\2\0\1\4\3\0\4\5\1\77"+
    "\15\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\211\1\5\1\212\4\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\1\5\1\213\20\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\5\5\1\214"+
    "\1\5\1\215\2\0\1\4\3\0\1\5\1\216\1\217"+
    "\4\5\1\220\1\5\1\221\7\5\1\222\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\2\5\1\104\17\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\3\5\1\223\4\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\224\6\5\1\225\2\0\1\4\3\0\2\5"+
    "\1\162\17\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\7\5\1\213\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\13\5\1\77\6\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\226\7\5\2\0\1\4"+
    "\3\0\1\5\1\227\7\5\1\230\10\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\10\5\1\231\11\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\232\4\5\1\233\1\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\6\5\1\213\1\5\2\0\1\4"+
    "\3\0\10\5\1\234\11\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\235\6\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\5\1\236\6\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\237"+
    "\7\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\7\5\1\240\2\0\1\4"+
    "\3\0\5\5\1\77\14\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\7\5\1\241\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\6\5\1\242\13\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\6\5\1\243\13\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\10\5\1\244\1\245\10\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\246\3\5\1\247\2\5"+
    "\2\0\1\4\3\0\12\5\1\250\1\251\6\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\77\4\5"+
    "\1\252\1\253\1\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\4\5\1\254"+
    "\3\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\5\1\77\4\5\1\77"+
    "\1\5\2\0\1\4\3\0\12\5\1\255\7\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\256\11\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\5\5\1\257\2\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\2\5\1\260"+
    "\7\5\1\261\7\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\6\5\1\262"+
    "\13\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\7\5\1\263\2\0\1\4\3\0\11\5\1\264\10\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\5\5"+
    "\1\265\2\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\2\5\1\266\17\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\1\5"+
    "\1\267\20\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\270\5\5\1\271\1\5\2\0\1\4\3\0"+
    "\1\272\1\5\1\273\10\5\1\274\6\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\2\5\1\275\17\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\2\5"+
    "\1\276\17\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\277\7\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\5\1\300"+
    "\6\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\7\5\1\301\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\7\5\1\302\12\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\303"+
    "\7\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\12\5\1\304\7\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\305\7\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\5\5"+
    "\1\306\2\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\5\5\1\307\14\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\6\5\1\232\1\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\77\7\5\2\0\1\4\3\0\13\5\1\310"+
    "\6\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\311\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\5\1\312"+
    "\5\5\1\213\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\313\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\5\5\1\314\2\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\5\5\1\315\2\5"+
    "\1\316\11\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\317\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\77"+
    "\7\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\17\5\1\320\2\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\3\5\1\321\4\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\4\5\1\322\2\5\1\323\2\0\1\4\3\0\1\5"+
    "\1\324\20\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\7\5\1\325\2\0\1\4\3\0\14\5\1\77"+
    "\5\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\10\5\1\326\11\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\2\5\1\327"+
    "\5\5\2\0\1\4\3\0\3\5\1\330\16\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\5\1\331"+
    "\6\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\5\1\332\6\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\5\1\77\6\5\2\0\1\4\3\0"+
    "\22\5\44\0\1\333\53\0\1\334\56\0\1\335\105\0"+
    "\1\336\62\0\1\337\53\0\1\340\56\0\1\341\105\0"+
    "\1\342\16\0\3\62\2\204\1\62\1\204\1\0\1\62"+
    "\6\0\2\62\1\64\1\62\2\0\4\62\1\64\3\62"+
    "\2\0\1\62\3\0\13\62\1\64\6\62\3\0\2\204"+
    "\1\0\1\204\56\0\3\62\4\207\1\0\1\62\6\0"+
    "\1\62\1\206\2\207\2\0\3\62\3\207\1\206\1\62"+
    "\2\0\1\62\3\0\6\62\1\207\2\62\1\207\1\62"+
    "\1\207\6\62\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\343\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\3\5"+
    "\1\344\4\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\10\5\1\77\11\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\3\5\1\77\4\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\6\5\1\345\1\5\2\0\1\4\3\0\13\5"+
    "\1\346\6\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\2\5\1\347\7\5"+
    "\1\350\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\351\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\10\5\1\352\11\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\2\5\1\353\17\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\12\5"+
    "\1\354\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\2\5\1\355\5\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\7\5"+
    "\1\77\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\2\5\1\356\17\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\5\5\1\357\2\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\3\5\1\360\4\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\12\5\1\361\7\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\3\5\1\362\4\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\11\5\1\363"+
    "\10\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\7\5\1\210\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\364\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\3\5"+
    "\1\365\16\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\5\5\1\366\2\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\12\5\1\367\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\370\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\371\7\5\2\0\1\4\3\0"+
    "\12\5\1\372\7\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\3\5\1\356\4\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\373\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\7\5\1\374\12\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\5\5\1\152\2\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\2\5\1\375"+
    "\17\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\376\7\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\5\1\377\6\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\11\5"+
    "\1\u0100\10\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\6\5\1\u0101\1\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\4\5"+
    "\1\232\3\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\251\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\u0102\6\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\7\5\1\u0103\12\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\6\5"+
    "\1\u0104\1\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\14\5\1\u0105\5\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\u0106\7\5\2\0\1\4\3\0"+
    "\1\5\1\u0107\5\5\1\u0108\1\5\1\u0109\10\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\6\5\1\u010a"+
    "\1\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\11\5\1\245\10\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\20\5\1\u010b"+
    "\1\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\u010c\7\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\10\5\1\u010d\11\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\6\5\1\u010e\1\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\u010f\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\2\5\1\u0110\17\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\u0111\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\u0112\7\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\3\5\1\u0113\4\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\u0114\7\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\6\5\1\213\1\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\1\77\21\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\13\5\1\u0115\6\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\7\5\1\u0116\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\2\5\1\212\17\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\3\5"+
    "\1\u0115\4\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\6\5\1\u0117\1\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\12\5"+
    "\1\77\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\5\1\232\6\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\3\5"+
    "\1\u0118\4\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\u0119\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\u011a\6\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\13\5\1\u011b\6\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\7\5"+
    "\1\223\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\5\1\345\6\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\1\5\1\345"+
    "\20\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\u011c\6\5\1\u011d\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\11\5\1\152\10\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\3\5\1\u011e\4\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\5\1\u011f\6\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\5\5\1\u0120\2\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\u0121\7\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\u0122\6\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\1\5\1\u0123\20\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\5\5"+
    "\1\u0124\2\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\6\5\1\u0103\13\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\10\5"+
    "\1\147\11\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\5\5\1\u0125\2\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\u0126"+
    "\7\5\2\0\1\4\3\0\22\5\41\0\1\u0127\53\0"+
    "\1\333\100\0\1\u0128\44\0\1\u0129\101\0\1\u012a\53\0"+
    "\1\337\100\0\1\u012b\44\0\1\u012c\40\0\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\u012d\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\12\5"+
    "\1\u012e\7\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\13\5\1\u012f\6\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\2\5"+
    "\1\u0130\5\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\162\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\u0131\7\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\7\5\1\u0132\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\5\1\105\6\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\2\5"+
    "\1\u0133\17\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\6\5\1\77\1\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\4\5"+
    "\1\213\3\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\5\1\u0134\6\5"+
    "\2\0\1\4\3\0\10\5\1\u0135\11\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\5\1\u0136\6\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\1\5"+
    "\1\162\20\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\u0137\7\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\6\5\1\u0138"+
    "\1\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\5\5\1\u0139\2\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\4\5\1\77"+
    "\15\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\5\5\1\u013a\14\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\5\5\1\u013b\14\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\5\1\u013c\6\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\6\5\1\u013d\1\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\5\5\1\u013e\2\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\2\5\1\u013f\3\5\1\u0140\13\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\u0141\11\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\2\5\1\u0142\17\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\3\5\1\u0143\4\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\5\5\1\u0144\2\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\3\5\1\105"+
    "\4\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\u0145\7\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\6\5\1\u0146\1\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\6\5"+
    "\1\u0145\1\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\u0147\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\3\5\1\u0148\4\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\u0149\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\5"+
    "\1\u014a\6\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\u014b\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\2\5"+
    "\1\u014c\17\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\105\1\5\1\u014d\2\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\4\5\1\u014e\3\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\u014f"+
    "\7\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\3\5\1\u0150\4\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\5\1\u0151\6\5\2\0\1\4\3\0"+
    "\7\5\1\u014f\12\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\10\5\1\213"+
    "\11\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\u0152\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\2\5\1\u0153\17\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\15\5\1\232\4\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\3\5\1\346\4\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\6\5\1\u0140\13\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\5\5\1\u014d"+
    "\2\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\3\5\1\u0154\4\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\7\5\1\u0155\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\4\5"+
    "\1\322\3\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\u0156\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\2\5"+
    "\1\u0157\17\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\5\5\1\u0158\2\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\u0159"+
    "\7\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\11\5\1\162\10\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\5\1\u015a\4\5\1\u015b\1\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\2\5\1\u015c\5\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\u015d\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\3\5\1\u015e"+
    "\4\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\2\5\1\u015f\17\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\5\5\1\u0160"+
    "\14\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\u0161\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\2\5\1\245"+
    "\5\5\2\0\1\4\3\0\22\5\16\0\1\u0162\102\0"+
    "\1\333\4\0\1\u0127\24\0\1\u0129\1\u0163\4\u0129\1\0"+
    "\1\u0163\2\0\1\u0163\2\0\5\u0129\2\u0163\10\u0129\3\u0163"+
    "\1\0\2\u0163\22\u0129\16\0\1\u0164\102\0\1\337\4\0"+
    "\1\u012a\24\0\1\u012c\1\u0165\4\u012c\1\0\1\u0165\2\0"+
    "\1\u0165\2\0\5\u012c\2\u0165\10\u012c\3\u0165\1\0\2\u0165"+
    "\22\u012c\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\13\5\1\u0166\6\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\u0167\11\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\3\5\1\u0168\4\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\5\1\u0169\6\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\u016a\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\u016b\7\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\5\1\u016c\6\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\10\5\1\245\11\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\13\5\1\u016d\6\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\1\u016e\7\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\2\5\1\u016f"+
    "\17\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\6\5\1\366\1\5\2\0\1\4\3\0\2\5\1\u0170"+
    "\17\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\5\1\u0143\6\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\5\5\1\u0171"+
    "\2\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\6\5\1\u0172\13\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\5\5\1\u0173\2\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\2\5\1\u0147\5\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\1\5\1\u0174"+
    "\6\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\10\5\1\u0175\11\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\12\5\1\u0176"+
    "\7\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\7\5\1\77\12\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\11\5\1\77\10\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\13\5\1\232\6\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\6\5\1\152\1\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\2\5\1\u013f\17\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\3\5\1\345"+
    "\4\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\u0177\7\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\11\5\1\u0171\10\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\5"+
    "\1\u0178\6\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\u0179\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\13\5"+
    "\1\u017a\6\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\7\5\1\u017b\2\0\1\4\3\0\11\5\1\232"+
    "\10\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\7\5\1\u0177\12\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\12\5\1\u017c\7\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\3\5\1\314\4\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\5\5\1\u017d"+
    "\14\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\4\5\1\u017e\3\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\2\5\1\u017f\17\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\5\5\1\u0180\2\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\5\5\1\u0181\2\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\1\5\1\u0182\20\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\u0183\11\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\10\5\1\u0184\11\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\2\5\1\u0185"+
    "\17\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\2\5\1\u0186\17\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\12\5\1\u0187\7\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\6\5\1\u0188\1\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\2\5\1\u0189\5\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\11\5\1\u013a\10\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\u018a\2\5\1\232\6\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\2\5\1\u018b\17\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\7\5\1\u018c\12\5\16\0\1\u0129\64\0\1\u012c\46\0"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\14\5\1\u018d\5\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\6\5\1\u0174\1\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\10\5"+
    "\1\u0188\11\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\11\5\1\u018e\10\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\12\5\1\u018f\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\306\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\3\5\1\u018c\4\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\u0190\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\12\5\1\212\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\16\5\1\u0191\3\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\377\7\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\6\5\1\u016b\1\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\11\5\1\u0188\10\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\4\5\1\232\15\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\345\7\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\12\5\1\u0192\7\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\3\5\1\232\4\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\366\7\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\5\5\1\77\14\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\2\5\1\u0193"+
    "\5\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\1\377\21\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\5\1\u0194\6\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\3\5"+
    "\1\u0195\4\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\u0196\2\5"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\u0101\7\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\6\5\1\u0197\1\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\345\11\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\5\5\1\u0198\2\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\10\5\2\0\1\4\3\0\11\5\1\u0199"+
    "\10\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\5\5\1\u0192\2\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\10\5\2\0"+
    "\1\4\3\0\10\5\1\u018c\11\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\10\5\2\0\1\4\3\0"+
    "\13\5\1\u0177\6\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\5\5\1\u0143\2\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\1\232\7\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\11\5\1\u019a\10\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\1\u019b\7\5\2\0\1\4\3\0"+
    "\22\5\1\4\6\5\1\0\1\4\6\0\4\5\2\0"+
    "\10\5\2\0\1\4\3\0\11\5\1\232\10\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\7\5\1\232"+
    "\2\0\1\4\3\0\22\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\5\5\1\173\2\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\3\5\1\u019c\4\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\13\5\1\u019d\6\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\13\5\1\345\6\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\5\5\1\363\2\5\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\6\5\1\345\1\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\5"+
    "\1\213\6\5\2\0\1\4\3\0\22\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\5\5\1\232\14\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\10\5"+
    "\1\u019e\11\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\10\5\2\0\1\4\3\0\11\5\1\213\10\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\2\5\1\u0170\17\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\10\5\2\0\1\4"+
    "\3\0\11\5\1\u016c\10\5\1\4\6\5\1\0\1\4"+
    "\6\0\4\5\2\0\10\5\2\0\1\4\3\0\4\5"+
    "\1\345\15\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\1\46\7\5\2\0\1\4\3\0\22\5\1\4"+
    "\6\5\1\0\1\4\6\0\4\5\2\0\3\5\1\u019f"+
    "\4\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\7\5\1\u01a0\2\0\1\4"+
    "\3\0\22\5\1\4\6\5\1\0\1\4\6\0\4\5"+
    "\2\0\2\5\1\u01a1\5\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\1\u01a2"+
    "\7\5\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\5\1\u0151\6\5\2\0"+
    "\1\4\3\0\22\5\1\4\6\5\1\0\1\4\6\0"+
    "\4\5\2\0\1\u01a3\7\5\2\0\1\4\3\0\22\5"+
    "\1\4\6\5\1\0\1\4\6\0\4\5\2\0\10\5"+
    "\2\0\1\4\3\0\11\5\1\u0177\10\5\1\4\6\5"+
    "\1\0\1\4\6\0\4\5\2\0\5\5\1\363\1\5"+
    "\1\232\2\0\1\4\3\0\22\5\1\4\6\5\1\0"+
    "\1\4\6\0\4\5\2\0\1\5\1\246\6\5\2\0"+
    "\1\4\3\0\22\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\11\1\1\11\16\1\2\11\4\1\1\11\13\1"+
    "\2\11\100\1\10\0\1\1\1\0\125\1\10\0\104\1"+
    "\2\0\1\1\2\0\66\1\4\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public DelphiTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DelphiTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DelphiTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addToken(Token.PREPROCESSOR);
          }
        case 26: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 28: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 29: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 30: break;
        case 20: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 10: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 33: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 19: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 35: break;
        case 21: 
          { addToken(Token.FUNCTION);
          }
        case 36: break;
        case 7: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 37: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 38: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 39: break;
        case 22: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 40: break;
        case 18: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 42: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 43: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 44: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.COMMENT_MULTILINE);
          }
        case 45: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 46: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 47: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 48: break;
        case 11: 
          { 
          }
        case 49: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 420: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 421: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 422: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
