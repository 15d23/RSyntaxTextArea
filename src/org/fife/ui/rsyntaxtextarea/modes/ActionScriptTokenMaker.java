/* The following code was generated by JFlex 1.4.1 on 4/27/10 4:17 PM */

/*
 * 04/27/2010
 *
 * ActionScriptTokenMaker.java - Scanner for ActionScript.
 * Copyright (C) 2010 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the ActionScript.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated ActionScriptTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class ActionScriptTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\50\1\15"+
    "\1\20\1\1\1\50\1\52\1\7\2\55\1\23\1\43\1\42\1\31"+
    "\1\32\1\22\1\4\3\16\4\6\2\3\1\53\1\42\1\44\1\45"+
    "\1\47\1\51\1\54\1\76\1\5\1\72\1\26\1\30\1\70\1\1"+
    "\1\113\1\112\1\1\1\77\1\25\1\100\1\101\1\102\1\106\1\114"+
    "\1\110\1\104\1\74\1\107\1\111\1\1\1\105\2\1\1\55\1\11"+
    "\1\55\1\46\1\2\1\0\1\36\1\14\1\64\1\62\1\35\1\27"+
    "\1\67\1\56\1\60\1\103\1\63\1\37\1\71\1\13\1\65\1\57"+
    "\1\66\1\34\1\40\1\33\1\12\1\73\1\61\1\24\1\75\1\1"+
    "\1\41\1\46\1\41\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\2\1\4\1\5\3\2"+
    "\1\6\2\1\1\7\2\10\2\2\1\10\7\2\1\11"+
    "\1\2\5\10\22\2\1\12\1\13\5\12\1\14\3\12"+
    "\1\1\1\15\1\3\1\16\1\15\1\16\1\15\1\17"+
    "\1\15\1\2\1\4\1\20\1\0\1\4\3\2\1\21"+
    "\2\2\2\6\1\22\1\1\1\23\1\24\17\2\1\21"+
    "\6\2\1\0\1\10\3\2\2\21\6\2\2\21\17\2"+
    "\1\25\10\0\1\1\1\16\1\0\2\17\1\2\1\4"+
    "\1\26\2\4\1\20\1\4\6\2\1\21\1\2\1\6"+
    "\1\27\1\6\1\1\1\0\31\2\1\30\25\2\1\30"+
    "\10\0\1\1\1\2\1\4\6\2\1\6\1\1\1\31"+
    "\2\2\1\32\12\2\1\30\27\2\2\0\1\33\2\0"+
    "\1\34\1\1\1\2\1\4\6\2\1\6\1\1\17\2"+
    "\1\30\17\2\4\0\1\1\1\2\1\4\5\2\1\6"+
    "\1\1\32\2\1\1\20\2\1\30\20\2\1\30\32\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u02b5\0\u0436"+
    "\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e"+
    "\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u02b5\0\u02b5\0\u086c"+
    "\0\u08b9\0\u0906\0\u02b5\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87"+
    "\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef"+
    "\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u02b5"+
    "\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u02b5\0\u10d8\0\u1125"+
    "\0\u1172\0\u11bf\0\u120c\0\u120c\0\u120c\0\u1259\0\u12a6\0\u12f3"+
    "\0\u1340\0\u138d\0\u13da\0\u1427\0\u02b5\0\u1474\0\u14c1\0\u150e"+
    "\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u02b5"+
    "\0\u1776\0\u02b5\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944"+
    "\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac"+
    "\0\u1bf9\0\u1c46\0\u0134\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7"+
    "\0\u1e14\0\u051d\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2"+
    "\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a"+
    "\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2"+
    "\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u02b5"+
    "\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935"+
    "\0\u2982\0\u29cf\0\u2a1c\0\u120c\0\u2a69\0\u2ab6\0\u2b03\0\u02b5"+
    "\0\u2b50\0\u2b9d\0\u1474\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e"+
    "\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u02b5\0\u2eec\0\u2f39"+
    "\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107\0\u3154\0\u31a1"+
    "\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u3409"+
    "\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671"+
    "\0\u36be\0\u370b\0\u0134\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c"+
    "\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4"+
    "\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c"+
    "\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4"+
    "\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df\0\u422c"+
    "\0\u4279\0\u42c6\0\u4313\0\u4360\0\u02b5\0\u43ad\0\u43fa\0\u0134"+
    "\0\u4447\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662"+
    "\0\u46af\0\u46fc\0\u4749\0\u4796\0\u47e3\0\u4830\0\u487d\0\u48ca"+
    "\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32"+
    "\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a"+
    "\0\u4de7\0\u4e34\0\u4e81\0\u4ece\0\u4f1b\0\u4f68\0\u4fb5\0\u5002"+
    "\0\u504f\0\u509c\0\u50e9\0\u5136\0\u5183\0\u51d0\0\u521d\0\u526a"+
    "\0\u52b7\0\u5304\0\u5351\0\u539e\0\u53eb\0\u5438\0\u5485\0\u54d2"+
    "\0\u551f\0\u556c\0\u55b9\0\u5606\0\u5653\0\u56a0\0\u56ed\0\u573a"+
    "\0\u5787\0\u57d4\0\u5821\0\u586e\0\u58bb\0\u5908\0\u5955\0\u59a2"+
    "\0\u59ef\0\u5a3c\0\u5a89\0\u5ad6\0\u5b23\0\u5b70\0\u1f95\0\u5bbd"+
    "\0\u5c0a\0\u5c57\0\u5ca4\0\u4f1b\0\u5cf1\0\u5002\0\u5d3e\0\u5d8b"+
    "\0\u5dd8\0\u5e25\0\u5e72\0\u5ebf\0\u5f0c\0\u5f59\0\u5fa6\0\u5ff3"+
    "\0\u6040\0\u608d\0\u60da\0\u6127\0\u6174\0\u61c1\0\u620e\0\u625b"+
    "\0\u62a8\0\u62f5\0\u6342\0\u638f\0\u63dc\0\u6429\0\u6476\0\u64c3"+
    "\0\u6510\0\u655d\0\u65aa\0\u65f7\0\u6644\0\u6691\0\u66de\0\u672b"+
    "\0\u6778\0\u67c5\0\u6812\0\u685f\0\u68ac\0\u68f9\0\u6946\0\u6993"+
    "\0\u69e0\0\u6a2d\0\u6a7a\0\u6ac7\0\u6b14\0\u6b61\0\u6bae\0\u6bfb"+
    "\0\u6c48\0\u6c95\0\u6ce2\0\347\0\u6d2f\0\u6d7c\0\u6dc9\0\u6e16"+
    "\0\u6e63\0\u6eb0\0\u6efd\0\u6f4a\0\u6f97\0\u6fe4\0\u7031\0\u707e"+
    "\0\u70cb\0\u7118\0\u7165\0\u71b2\0\u71ff\0\u724c\0\u7299\0\u72e6"+
    "\0\u7333\0\u7380\0\u73cd\0\u741a\0\u7467\0\u74b4\0\u7501\0\u754e"+
    "\0\u759b\0\u75e8\0\u7635\0\u7682\0\u76cf\0\u771c\0\u7769\0\u77b6"+
    "\0\u7803\0\u7850\0\u789d\0\u78ea\0\u7937\0\u7984\0\u79d1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\6\1\17\1\20"+
    "\1\21\1\22\1\23\2\5\1\24\1\25\1\5\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\23\1\42\1\23\1\43\1\44"+
    "\1\43\1\4\1\36\1\5\1\45\1\46\1\47\1\50"+
    "\1\5\1\51\1\52\1\5\1\53\1\54\1\55\1\56"+
    "\1\57\2\5\1\60\1\61\1\62\1\63\1\64\1\5"+
    "\1\65\1\66\7\5\10\67\1\70\12\67\1\71\3\67"+
    "\1\72\26\67\1\73\2\67\1\74\33\67\10\75\1\76"+
    "\16\75\1\77\26\75\1\100\2\75\1\101\33\75\7\4"+
    "\2\0\4\4\1\0\1\4\1\0\1\4\3\0\5\4"+
    "\2\0\6\4\13\0\1\4\1\0\40\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\3\103\2\6"+
    "\1\103\1\6\2\0\4\103\1\0\1\6\1\0\1\103"+
    "\3\0\1\103\1\104\2\105\1\106\1\0\1\107\2\103"+
    "\1\106\1\103\1\104\1\103\13\0\1\103\1\0\4\103"+
    "\1\105\5\103\1\105\27\103\1\110\1\111\1\103\1\111"+
    "\2\0\4\103\1\0\1\111\1\0\1\103\3\0\1\112"+
    "\1\104\2\105\1\106\1\0\1\107\2\103\1\106\1\103"+
    "\1\104\1\103\13\0\1\103\1\0\4\103\1\105\5\103"+
    "\1\105\14\103\1\112\7\103\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\7\5\1\113\27\5\7\114"+
    "\1\115\1\116\1\117\103\114\115\0\1\4\6\5\2\0"+
    "\1\102\1\5\1\120\1\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\1\5"+
    "\1\121\35\5\1\4\6\5\2\0\1\102\1\122\2\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\123\3\5\13\0\1\4\1\0\7\5\1\124\27\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\5\1\125\4\5\13\0"+
    "\1\4\1\0\37\5\10\16\1\126\1\127\3\16\1\130"+
    "\77\16\7\4\2\0\4\4\1\0\1\4\1\0\1\4"+
    "\3\0\5\4\2\0\6\4\13\0\1\4\1\0\2\4"+
    "\1\131\34\4\21\0\1\21\115\0\1\132\1\133\21\0"+
    "\1\43\114\0\1\43\47\0\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\134\2\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\1\135\2\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\136\1\5\1\137"+
    "\13\0\1\4\1\0\7\5\1\140\27\5\31\0\1\43"+
    "\13\0\1\43\52\0\2\107\1\0\1\107\7\0\1\107"+
    "\76\0\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\141\1\142"+
    "\1\143\2\5\13\0\1\4\1\0\1\144\6\5\1\145"+
    "\7\5\1\146\17\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\147\1\150\2\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\4\5\1\151\1\152\13\0\1\4"+
    "\1\0\10\5\1\153\4\5\1\154\21\5\1\4\6\5"+
    "\2\0\1\102\1\5\1\155\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\4\5\1\155\32\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\153"+
    "\1\5\1\153\3\5\13\0\1\4\1\0\7\5\1\156"+
    "\27\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\157\1\5\1\160"+
    "\3\5\13\0\1\4\1\0\6\5\1\161\30\5\43\0"+
    "\1\43\1\0\1\43\113\0\1\162\1\43\114\0\1\43"+
    "\1\0\1\163\112\0\1\43\4\0\1\43\42\0\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\5\1\164\1\5\1\165\1\166"+
    "\1\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\1\5\1\167\1\5\1\0\1\5\1\0\1\4"+
    "\3\0\3\5\1\170\1\5\2\0\5\5\1\171\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\1\172\1\5\1\173\34\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\174\3\5\13\0\1\4"+
    "\1\0\7\5\1\153\27\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\175\2\5\13\0\1\4\1\0\7\5\1\176"+
    "\27\5\1\4\6\5\2\0\1\102\1\5\1\177\1\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\153\4\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\153\1\5\1\200\3\5\13\0\1\4"+
    "\1\0\7\5\1\201\27\5\1\4\6\5\2\0\1\102"+
    "\1\202\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\203\2\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\7\5\1\204\27\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\140\2\5\13\0\1\4\1\0\7\5\1\205"+
    "\27\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\206\4\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\207\3\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\3\5\1\210\2\5\13\0\1\4"+
    "\1\0\7\5\1\211\27\5\1\4\6\5\2\0\1\102"+
    "\1\212\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\2\5\1\213\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\214\1\5\1\215\3\5"+
    "\13\0\1\4\1\0\7\5\1\216\27\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\22\5\1\217"+
    "\14\5\10\67\1\0\12\67\1\0\3\67\1\0\26\67"+
    "\1\0\2\67\1\0\33\67\22\0\1\220\125\0\1\221"+
    "\24\0\1\222\67\0\1\223\142\0\1\224\33\0\10\75"+
    "\1\0\16\75\1\0\26\75\1\0\2\75\1\0\33\75"+
    "\33\0\1\225\24\0\1\226\67\0\1\227\142\0\1\230"+
    "\33\0\7\4\2\0\1\4\1\231\2\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\2\0\6\4\13\0\1\4"+
    "\1\0\37\4\7\103\2\0\4\103\1\0\1\103\1\0"+
    "\1\103\3\0\5\103\2\0\6\103\13\0\1\103\1\0"+
    "\42\103\2\232\1\103\1\232\2\0\4\103\1\0\1\232"+
    "\1\0\1\103\3\0\5\103\1\233\1\0\6\103\2\0"+
    "\1\233\10\0\1\103\1\0\42\103\2\107\1\103\1\107"+
    "\2\0\4\103\1\0\1\107\1\0\1\103\3\0\2\103"+
    "\2\105\1\106\2\0\2\103\1\106\3\103\13\0\1\103"+
    "\1\0\4\103\1\105\5\103\1\105\27\103\2\110\1\103"+
    "\1\110\2\0\4\103\1\0\1\110\1\0\1\103\3\0"+
    "\2\103\2\105\1\106\1\0\1\107\2\103\1\106\3\103"+
    "\13\0\1\103\1\0\4\103\1\105\5\103\1\105\27\103"+
    "\1\110\1\111\1\103\1\111\2\0\4\103\1\0\1\111"+
    "\1\0\1\103\3\0\1\103\1\234\2\105\1\106\1\0"+
    "\1\107\2\103\1\106\1\103\1\234\1\103\13\0\1\103"+
    "\1\0\4\103\1\105\5\103\1\105\27\103\4\235\2\0"+
    "\3\103\1\235\1\0\1\235\1\0\1\103\3\0\2\103"+
    "\3\235\2\0\2\103\2\235\2\103\13\0\1\103\1\0"+
    "\4\103\1\235\1\103\1\235\3\103\1\235\1\103\1\235"+
    "\3\103\1\235\16\103\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\7\5\1\236\27\5\7\237\1\240"+
    "\1\0\104\237\7\0\1\240\105\0\4\237\1\241\1\237"+
    "\1\242\1\243\1\0\1\114\1\244\3\114\1\241\10\237"+
    "\1\114\3\237\2\114\60\237\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\245\1\5\1\246\1\5\13\0\1\4\1\0"+
    "\4\5\1\247\32\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\4\5\1\250\32\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\4\5\1\251\1\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\1\252\4\5\2\0\6\5\13\0"+
    "\1\4\1\0\3\5\1\253\33\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\153\5\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\254\3\5\13\0\1\4"+
    "\1\0\37\5\11\126\1\255\3\126\1\256\103\126\1\16"+
    "\1\126\2\16\1\0\1\16\1\257\4\16\10\126\1\16"+
    "\3\126\2\16\60\126\7\4\2\0\2\4\1\260\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\5\4\2\0\6\4"+
    "\13\0\1\4\1\0\37\4\23\0\1\261\71\0\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\262\5\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\1\5\1\263\1\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\264\1\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\6\5"+
    "\1\265\30\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\5\1\153"+
    "\4\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\1\266\2\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\267\2\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\270\1\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\5\1\271\4\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\2\5"+
    "\1\272\34\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\11\5\1\273\25\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\1\5\1\274\35\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\275\5\5\13\0\1\4"+
    "\1\0\13\5\1\276\23\5\1\4\6\5\2\0\1\102"+
    "\1\5\1\277\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\5\5\1\300\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\6\5\1\301\30\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\302\2\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\4\5"+
    "\1\153\32\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\3\5\1\303"+
    "\2\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\304\2\5\13\0\1\4\1\0\7\5"+
    "\1\305\27\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\306\5\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\5\1\307\4\5\13\0\1\4\1\0\37\5\45\0"+
    "\1\43\1\0\1\23\45\0\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\310\3\5\13\0\1\4\1\0\2\5\1\311"+
    "\34\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\312\4\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\207\2\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\313\5\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\12\5\1\314\24\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\12\5\1\315\10\5\1\316"+
    "\13\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\2\5\1\317\34\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\320\5\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\4\5\1\321\1\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\302\1\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\1\5\1\322\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\14\5"+
    "\1\323\22\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\324\5\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\325\5\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\1\5\1\326\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\1\327\4\5\2\0\6\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\330\1\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\2\5\1\155"+
    "\34\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\166\4\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\17\5\1\313\17\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\331\5\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\1\332\2\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\15\5\1\333\21\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\13\5\1\334\23\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\25\5\1\335\11\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\336\4\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\4\5\1\337\1\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\1\340\2\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\1\5\1\341\3\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\57\0\1\342"+
    "\74\0\1\343\110\0\1\344\142\0\1\345\112\0\1\346"+
    "\74\0\1\347\110\0\1\350\142\0\1\351\33\0\3\4"+
    "\4\352\2\0\3\4\1\352\1\0\1\352\1\0\1\4"+
    "\3\0\2\4\3\352\2\0\2\4\2\352\2\4\13\0"+
    "\1\4\1\0\4\4\1\352\1\4\1\352\3\4\1\352"+
    "\1\4\1\352\3\4\1\352\16\4\3\103\2\232\1\103"+
    "\1\232\2\0\4\103\1\0\1\232\1\0\1\103\3\0"+
    "\2\103\2\105\1\103\2\0\6\103\13\0\1\103\1\0"+
    "\4\103\1\105\5\103\1\105\24\103\3\0\2\232\1\0"+
    "\1\232\7\0\1\232\76\0\3\103\4\235\2\0\3\103"+
    "\1\235\1\0\1\235\1\0\1\103\3\0\1\103\1\234"+
    "\3\235\2\0\2\103\2\235\1\234\1\103\13\0\1\103"+
    "\1\0\4\103\1\235\1\103\1\235\3\103\1\235\1\103"+
    "\1\235\3\103\1\235\16\103\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\353\1\5\13\0\1\4\1\0\37\5\7\237"+
    "\1\115\1\0\110\237\1\242\1\237\1\242\1\240\1\0"+
    "\5\237\1\242\102\237\1\114\1\237\1\114\1\240\1\0"+
    "\5\237\1\114\101\237\4\354\1\115\1\0\3\237\1\354"+
    "\1\237\1\354\7\237\3\354\4\237\2\354\23\237\1\354"+
    "\1\237\1\354\3\237\1\354\1\237\1\354\3\237\1\354"+
    "\16\237\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\5\5\1\152\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\7\5\1\355\27\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\356\3\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\357\2\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\153\1\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\360\5\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\361\1\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\362\2\5\13\0\1\4\1\0\37\5\10\126"+
    "\1\0\107\126\4\363\2\126\1\255\2\126\1\363\1\256"+
    "\1\363\7\126\3\363\4\126\2\363\23\126\1\363\1\126"+
    "\1\363\3\126\1\363\1\126\1\363\3\126\1\363\16\126"+
    "\7\4\2\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\2\0\6\4\13\0\1\4\1\0\6\4\1\364"+
    "\30\4\22\0\1\365\72\0\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\313\3\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\6\5"+
    "\1\366\30\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\5\5\1\266"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\7\5\1\367\27\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\370\3\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\6\5\1\262\30\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\4\5\1\371\1\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\11\5\1\372\25\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\5\5"+
    "\1\153\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\11\5\1\373\25\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\374\3\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\1\375"+
    "\2\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\7\5\1\376\27\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\4\5\1\377\32\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\153\3\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\u0100\2\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\313\1\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\4\5\1\u0101\32\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\5\1\u0102\4\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\1\5\1\u0103\35\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\30\5\1\u0104\6\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\7\5\1\175\27\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\15\5\1\360\21\5\1\4\6\5"+
    "\2\0\1\102\1\5\1\u0105\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\5\5\1\u0106\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\u0107\4\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\2\5\1\u0108"+
    "\34\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\u0109\2\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\4\5\1\300\1\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\1\153"+
    "\36\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\u010a\3\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\u010b\5\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\4\5\1\u010c\1\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\16\5\1\u010d\11\5\1\u0104\1\u010e\1\5\1\u010f"+
    "\3\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\7\5\1\u0110\27\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\6\5\1\u0111\30\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\5\5\1\u0112\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\7\5\1\u0113\27\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\1\313\36\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\5\5\1\262\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\2\5\1\u0114\34\5\1\4\6\5\2\0\1\102\2\5"+
    "\1\u0115\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\2\5\1\u0116\3\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\2\5\1\u0117\34\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\326\3\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\1\5\1\u0118\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\23\5\1\u0119\2\5\1\u011a\10\5\53\0\1\u011b"+
    "\76\0\1\342\136\0\1\u011c\67\0\1\u011d\135\0\1\u011e"+
    "\76\0\1\346\136\0\1\u011f\67\0\1\u0120\62\0\3\4"+
    "\4\u0121\2\0\3\4\1\u0121\1\0\1\u0121\1\0\1\4"+
    "\3\0\2\4\3\u0121\2\0\2\4\2\u0121\2\4\13\0"+
    "\1\4\1\0\4\4\1\u0121\1\4\1\u0121\3\4\1\u0121"+
    "\1\4\1\u0121\3\4\1\u0121\17\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\u0122\3\5\13\0\1\4\1\0\37\5\3\237"+
    "\4\u0123\1\115\1\0\3\237\1\u0123\1\237\1\u0123\7\237"+
    "\3\u0123\4\237\2\u0123\23\237\1\u0123\1\237\1\u0123\3\237"+
    "\1\u0123\1\237\1\u0123\3\237\1\u0123\16\237\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\u0124\2\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\3\5\1\u0125\1\5\2\0\6\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\u0126\5\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\12\5\1\u0127"+
    "\13\5\1\u0128\10\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\2\5\1\u0129\34\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\5\5\1\153"+
    "\31\5\3\126\4\u012a\2\126\1\255\2\126\1\u012a\1\256"+
    "\1\u012a\7\126\3\u012a\4\126\2\u012a\23\126\1\u012a\1\126"+
    "\1\u012a\3\126\1\u012a\1\126\1\u012a\3\126\1\u012a\16\126"+
    "\7\4\2\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\2\0\4\4\1\u012b\1\4\13\0\1\4\1\0"+
    "\40\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\u012c\5\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\13\5\1\u012d\23\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\16\5\1\u012e\20\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\u012f\3\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\u0130\1\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\7\5\1\u0131"+
    "\27\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\u0132\4\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\15\5\1\u0133\21\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\7\5"+
    "\1\u0134\27\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\1\5\1\262\35\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\22\5\1\u0135\10\5"+
    "\1\u0136\3\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\u0137\5\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\2\5\1\u0138"+
    "\2\5\2\0\6\5\13\0\1\4\1\0\20\5\1\u0139"+
    "\16\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\5\1\u013a\4\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\u013b\5\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\u013c\3\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\u013d\2\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\1\5\1\u013e\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\23\5"+
    "\1\313\13\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\300\5\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\2\5\1\u013f\34\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\2\5"+
    "\1\u0140\34\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\2\5\1\u0141\34\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\32\5\1\u0142\4\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\u0143\3\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\20\5\1\u0144\16\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\u0145\5\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\6\5\1\161\30\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\313\4\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\u0146\3\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\u0113\3\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\6\5\1\u0147\30\5\1\4"+
    "\6\5\2\0\1\102\1\5\1\u0148\1\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\4\5\1\313\32\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\7\5\1\u0149\27\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\7\5\1\u014a\27\5\22\0\1\u014b\132\0\1\342\12\0"+
    "\1\u011b\42\0\1\u011d\1\u014c\4\u011d\1\u014c\2\0\3\u011d"+
    "\1\0\1\u011d\1\0\1\u014c\1\0\1\u011d\1\u014c\5\u011d"+
    "\2\u014c\6\u011d\1\0\2\u014c\1\0\1\u014c\2\0\6\u014c"+
    "\37\u011d\22\0\1\u014d\132\0\1\346\12\0\1\u011e\42\0"+
    "\1\u0120\1\u014e\4\u0120\1\u014e\2\0\3\u0120\1\0\1\u0120"+
    "\1\0\1\u014e\1\0\1\u0120\1\u014e\5\u0120\2\u014e\6\u0120"+
    "\1\0\2\u014e\1\0\1\u014e\2\0\6\u014e\37\u0120\3\4"+
    "\4\u014f\2\0\3\4\1\u014f\1\0\1\u014f\1\0\1\4"+
    "\3\0\2\4\3\u014f\2\0\2\4\2\u014f\2\4\13\0"+
    "\1\4\1\0\4\4\1\u014f\1\4\1\u014f\3\4\1\u014f"+
    "\1\4\1\u014f\3\4\1\u014f\17\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\u0150\2\5\13\0\1\4\1\0\37\5\3\237"+
    "\4\u0151\1\115\1\0\3\237\1\u0151\1\237\1\u0151\7\237"+
    "\3\u0151\4\237\2\u0151\23\237\1\u0151\1\237\1\u0151\3\237"+
    "\1\u0151\1\237\1\u0151\3\237\1\u0151\16\237\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\4\5\1\u0152"+
    "\32\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\2\5\1\u0153\34\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\u0154\3\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\5\1\u0155\4\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\6\5\1\u0156\30\5\1\4\6\5\2\0"+
    "\1\102\1\5\1\262\1\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\37\5"+
    "\3\126\4\u0157\2\126\1\255\2\126\1\u0157\1\256\1\u0157"+
    "\7\126\3\u0157\4\126\2\u0157\23\126\1\u0157\1\126\1\u0157"+
    "\3\126\1\u0157\1\126\1\u0157\3\126\1\u0157\16\126\7\4"+
    "\2\0\1\4\1\u0158\2\4\1\0\1\4\1\0\1\4"+
    "\3\0\5\4\2\0\6\4\13\0\1\4\1\0\40\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\2\5"+
    "\1\u0159\34\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\13\5\1\u015a\23\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\u015b\2\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\1\u015c\5\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\2\5\1\u015d"+
    "\3\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\3\5"+
    "\1\153\1\5\2\0\6\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\1\5\1\153\1\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\u015e\3\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\13\5\1\313"+
    "\23\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\7\5\1\u015f\27\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\u0160\2\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\2\5\1\u0138\2\5\2\0\6\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\5\1\u0161"+
    "\4\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\4\5\1\u0162\1\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\7\5\1\u0163\27\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\20\5\1\u0164\2\5\1\u0165\13\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\12\5\1\u0166\21\5\1\u0167\2\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\13\5\1\u0168\23\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\2\5\1\134\34\5\1\4\6\5\2\0\1\102\1\5"+
    "\1\u0169\1\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\1\5\1\u016a"+
    "\35\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\13\5\1\u0115\23\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\1\5\1\313"+
    "\3\5\2\0\6\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\5\1\u016b\4\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\1\5\1\u016c"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\2\5\1\u016d\34\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\14\5\1\u016e\22\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\11\5\1\313\25\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\4\5\1\262"+
    "\32\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\6\5\1\u016f\30\5\22\0\1\u011d\114\0\1\u0120"+
    "\72\0\3\4\4\5\2\0\3\4\1\5\1\0\1\5"+
    "\1\0\1\4\3\0\2\4\3\5\2\0\2\4\2\5"+
    "\2\4\13\0\1\4\1\0\4\4\1\5\1\4\1\5"+
    "\3\4\1\5\1\4\1\5\3\4\1\5\17\4\6\5"+
    "\2\0\1\102\1\5\1\313\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\37\5\3\237\4\114\1\115\1\0\3\237\1\114\1\237"+
    "\1\114\7\237\3\114\4\237\2\114\23\237\1\114\1\237"+
    "\1\114\3\237\1\114\1\237\1\114\3\237\1\114\16\237"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\22\5\1\u0135\14\5\1\4\6\5\2\0\1\102\1\5"+
    "\1\u0170\1\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\20\5\1\u0171"+
    "\16\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\u0172\2\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\u0129\3\5\13\0\1\4\1\0\37\5\3\126"+
    "\4\16\2\126\1\255\2\126\1\16\1\256\1\16\7\126"+
    "\3\16\4\126\2\16\23\126\1\16\1\126\1\16\3\126"+
    "\1\16\1\126\1\16\3\126\1\16\16\126\7\4\2\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\5\4\2\0"+
    "\6\4\13\0\1\4\1\0\4\4\1\u0173\33\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\7\5\1\u0132"+
    "\27\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\340\2\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\1\5\1\u0174\4\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\30\5"+
    "\1\u0175\6\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\35\5\1\u0176\1\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\22\5\1\u0177\14\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\15\5\1\u0178\21\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\1\5"+
    "\1\u0179\4\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\3\5\1\u0148\2\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\4\5\1\u017a\1\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\1\5\1\u017b\35\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\5\5\1\u017c\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\1\u0134\2\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\u017d\1\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\1\5\1\u0147\1\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\u017e\3\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\1\300\2\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\4\5\1\u017f\2\0\6\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\5\5\1\u0145\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\4\5\1\u0180\32\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\7\5\1\u0150\27\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\4\5\1\u0181\1\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\5\5\1\u0182\31\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\155\3\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\3\5\1\u0183\1\5\2\0\6\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\13\5\1\262\23\5\7\4"+
    "\2\0\4\4\1\0\1\4\1\0\1\4\3\0\5\4"+
    "\2\0\2\4\1\u0184\3\4\13\0\1\4\1\0\40\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\11\5"+
    "\1\u0185\25\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\3\5\1\210"+
    "\2\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\2\5\1\u0186\34\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\7\5\1\u0187\27\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\2\5\1\u0188\34\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\2\5\1\u0189"+
    "\34\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\26\5\1\u018a\10\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\2\5\1\u018b\3\5\13\0\1\4\1\0\37\5\1\4"+
    "\4\5\1\u018c\1\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\6\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\7\5\1\u018d\27\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\1\5"+
    "\1\u018e\3\5\2\0\6\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\15\5\1\u018f\21\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\26\5\1\u0190\1\5\1\u0191\6\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\2\5\1\u0192\34\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\2\5"+
    "\1\u0147\3\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\1\u0193\5\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\2\5\1\124\3\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\11\5\1\u0194\25\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\15\5\1\333"+
    "\21\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\u0195\3\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\3\5\1\u0196\2\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\7\5"+
    "\1\u0197\27\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\5\1\u0198"+
    "\4\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\2\5\1\u0199\34\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\3\5\1\u0147\2\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\7\5\1\u019a\27\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\2\5\1\u019b\3\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\1\u019c\5\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\4\5"+
    "\1\166\1\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\1\5\1\313"+
    "\35\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\2\5\1\u019d\3\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\3\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\1\u019e\36\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\23\5\1\u0165"+
    "\13\5\1\4\6\5\2\0\1\102\2\5\1\u019f\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\1\u01a0"+
    "\2\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\1\207\5\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\1\u01a1\5\5\13\0\1\4\1\0"+
    "\37\5\1\4\6\5\2\0\1\102\3\5\1\0\1\5"+
    "\1\0\1\4\3\0\5\5\2\0\3\5\1\u01a2\2\5"+
    "\13\0\1\4\1\0\37\5\1\4\6\5\2\0\1\102"+
    "\1\5\1\124\1\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\6\5\13\0\1\4\1\0\7\5"+
    "\1\u0192\27\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\1\5\1\u01a3"+
    "\4\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\36\5\1\u01a4\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\4\5\1\u01a5\1\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\1\5\1\u01a6"+
    "\1\5\1\0\1\5\1\0\1\4\3\0\5\5\2\0"+
    "\6\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\6\5\13\0\1\4\1\0\13\5\1\u01a7\23\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\4\5\1\u0170\32\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\4\5\1\u01a8\2\0"+
    "\6\5\13\0\1\4\1\0\37\5\1\4\6\5\2\0"+
    "\1\102\1\u01a9\2\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\6\5\13\0\1\4\1\0\37\5\1\4"+
    "\6\5\2\0\1\102\3\5\1\0\1\5\1\0\1\4"+
    "\3\0\5\5\2\0\2\5\1\u01aa\3\5\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\4\5\1\u01ab\32\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\3\5\1\u01ac\2\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\6\5\13\0\1\4\1\0"+
    "\15\5\1\u01ad\21\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\3\5"+
    "\1\u01ae\2\5\13\0\1\4\1\0\37\5\1\4\6\5"+
    "\2\0\1\102\3\5\1\0\1\5\1\0\1\4\3\0"+
    "\5\5\2\0\5\5\1\u0195\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\5\5\1\313\13\0\1\4"+
    "\1\0\37\5\1\4\6\5\2\0\1\102\3\5\1\0"+
    "\1\5\1\0\1\4\3\0\5\5\2\0\6\5\13\0"+
    "\1\4\1\0\1\5\1\u0195\35\5\1\4\6\5\2\0"+
    "\1\102\3\5\1\0\1\5\1\0\1\4\3\0\5\5"+
    "\2\0\2\5\1\u0167\3\5\13\0\1\4\1\0\37\5"+
    "\1\4\6\5\2\0\1\102\3\5\1\0\1\5\1\0"+
    "\1\4\3\0\5\5\2\0\4\5\1\u01af\1\5\13\0"+
    "\1\4\1\0\37\5\1\4\6\5\2\0\1\102\3\5"+
    "\1\0\1\5\1\0\1\4\3\0\5\5\2\0\6\5"+
    "\13\0\1\4\1\0\2\5\1\u0198\34\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31262];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\6\1\1\11\4\1\1\11\16\1\2\11\3\1"+
    "\1\11\24\1\1\11\5\1\1\11\16\1\1\11\1\0"+
    "\11\1\1\11\1\1\1\11\27\1\1\0\35\1\1\11"+
    "\10\0\2\1\1\0\4\1\1\11\15\1\1\11\2\1"+
    "\1\0\60\1\10\0\13\1\1\11\45\1\2\0\1\1"+
    "\2\0\53\1\4\0\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ActionScriptTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActionScriptTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ActionScriptTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 29: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 30: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 25: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 33: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 35: break;
        case 23: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 36: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 37: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 38: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 39: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 40: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 41: break;
        case 19: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 42: break;
        case 24: 
          { addToken(Token.FUNCTION);
          }
        case 43: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 44: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 45: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 46: break;
        case 16: 
          { addToken(Token.ERROR_CHAR);
          }
        case 47: break;
        case 26: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 48: break;
        case 18: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 49: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 50: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 51: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 52: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 53: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 54: break;
        case 10: 
          { 
          }
        case 55: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 432: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 433: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 434: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
