/* The following code was generated by JFlex 1.4.1 on 2/1/12 6:32 PM */

/*
 * 01/24/2005
 *
 * HTMLTokenMaker.java - Generates tokens for HTML syntax highlighting.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for HTML 5 files.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated HTMLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.8
 *
 */

public class HTMLTokenMaker extends AbstractMarkupTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int JS_STRING = 12;
  public static final int INTAG_CHECK_TAG_NAME = 5;
  public static final int JS_MLC = 14;
  public static final int INTAG_SCRIPT = 8;
  public static final int JS_CHAR = 13;
  public static final int JS_EOL_COMMENT = 15;
  public static final int INATTR_DOUBLE_SCRIPT = 9;
  public static final int INATTR_SINGLE_SCRIPT = 10;
  public static final int DTD = 3;
  public static final int INATTR_SINGLE = 7;
  public static final int INATTR_DOUBLE = 6;
  public static final int YYINITIAL = 0;
  public static final int INTAG = 4;
  public static final int COMMENT = 1;
  public static final int JAVASCRIPT = 11;
  public static final int PI = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\1\1\26\22\0\1\4\1\50\1\7"+
    "\1\27\1\32\1\47\1\5\1\55\2\54\1\33\1\44\1\43\1\40"+
    "\1\41\1\10\1\22\6\105\1\24\2\21\1\52\1\6\1\3\1\45"+
    "\1\17\1\51\1\27\1\71\1\23\1\12\1\76\1\37\1\36\1\100"+
    "\1\104\1\14\1\106\1\101\1\35\1\75\1\73\1\72\1\15\1\102"+
    "\1\13\1\11\1\16\1\77\1\103\1\20\1\34\1\74\1\20\1\54"+
    "\1\30\1\54\1\46\1\31\1\0\1\110\1\107\1\67\1\114\1\65"+
    "\1\62\1\117\1\56\1\63\1\106\1\111\1\64\1\120\1\113\1\112"+
    "\1\60\1\102\1\70\1\61\1\57\1\25\1\116\1\66\1\121\1\115"+
    "\1\122\1\42\1\46\1\42\1\53\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\0\2\1\5\0\2\2\1\3\1\4"+
    "\1\5\1\6\1\1\1\7\5\1\1\10\2\1\1\11"+
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\21\2\23\1\21\2\23\4\21\1\23"+
    "\5\21\1\23\1\21\1\1\1\24\1\1\1\25\1\15"+
    "\1\26\1\27\1\30\1\31\1\32\2\17\1\2\1\33"+
    "\1\17\2\2\1\17\2\34\1\2\1\31\2\17\1\2"+
    "\1\35\1\17\1\36\21\2\1\1\1\37\1\40\1\41"+
    "\1\1\1\42\1\43\1\44\1\1\1\45\5\1\1\46"+
    "\1\1\1\4\1\47\1\50\1\51\1\47\1\6\5\0"+
    "\1\52\31\21\1\23\7\21\1\23\5\21\1\23\33\21"+
    "\1\53\2\0\1\54\1\55\1\31\1\2\1\17\1\56"+
    "\1\34\1\57\1\56\1\57\1\56\1\60\1\56\22\2"+
    "\2\61\27\2\1\61\2\2\1\62\1\63\1\64\1\65"+
    "\5\0\1\66\1\0\1\47\1\67\4\0\14\21\1\23"+
    "\63\21\2\0\1\31\1\2\1\57\1\0\2\60\26\2"+
    "\1\6\35\2\7\0\1\70\1\47\2\0\1\71\17\21"+
    "\1\23\6\21\1\23\14\21\1\0\1\72\1\31\2\2"+
    "\1\73\21\2\1\6\1\2\1\74\15\2\1\0\1\1"+
    "\2\0\1\75\1\0\1\47\2\0\10\21\1\23\13\21"+
    "\1\0\1\31\1\2\1\61\10\2\1\61\14\2\3\0"+
    "\1\47\12\21\1\0\1\31\17\2\1\0\1\76\3\21"+
    "\1\0\7\2\1\0\1\21\1\0\3\2\1\0\1\21"+
    "\1\77\1\2\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u05d6"+
    "\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u05d6\0\u0914\0\u0967"+
    "\0\u05d6\0\u05d6\0\u09ba\0\u0a0d\0\u05d6\0\u0a60\0\u05d6\0\u05d6"+
    "\0\u05d6\0\u0ab3\0\u05d6\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52"+
    "\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea"+
    "\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089\0\u0ab3\0\u10dc\0\u112f"+
    "\0\u05d6\0\u1182\0\u05d6\0\u11d5\0\u05d6\0\u05d6\0\u05d6\0\u1228"+
    "\0\u05d6\0\u127b\0\u12ce\0\u05d6\0\u05d6\0\u1321\0\u1374\0\u13c7"+
    "\0\u141a\0\u146d\0\u14c0\0\u1513\0\u05d6\0\u1566\0\u15b9\0\u160c"+
    "\0\u05d6\0\u165f\0\u05d6\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe"+
    "\0\u1851\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96"+
    "\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u05d6\0\u05d6\0\u1c88"+
    "\0\u1cdb\0\u05d6\0\u1c88\0\u05d6\0\u1d2e\0\u05d6\0\u1d81\0\u1dd4"+
    "\0\u1e27\0\u1e7a\0\u1ecd\0\u05d6\0\u1f20\0\u1f73\0\u1fc6\0\u2019"+
    "\0\u05d6\0\u206c\0\u05d6\0\u20bf\0\u2112\0\u2165\0\u21b8\0\u220b"+
    "\0\u05d6\0\u225e\0\u22b1\0\u2304\0\u2357\0\u23aa\0\u23fd\0\u2450"+
    "\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695\0\u26e8"+
    "\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980"+
    "\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18"+
    "\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0"+
    "\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148"+
    "\0\u319b\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0"+
    "\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678"+
    "\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u05d6\0\u1566\0\u3817\0\u05d6"+
    "\0\u386a\0\u38bd\0\u3910\0\u3963\0\u39b6\0\u39b6\0\u39b6\0\u3a09"+
    "\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1"+
    "\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39"+
    "\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8\0\u412b\0\u1374\0\u417e"+
    "\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370\0\u43c3\0\u4416"+
    "\0\u4469\0\u44bc\0\u450f\0\u4562\0\u45b5\0\u4608\0\u465b\0\u46ae"+
    "\0\u4701\0\u4754\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u4946"+
    "\0\u4999\0\u49ec\0\u05d6\0\u4a3f\0\u4a92\0\u05d6\0\u4ae5\0\u4b38"+
    "\0\u4b8b\0\u4bde\0\u4c31\0\u1f73\0\u4c84\0\u4cd7\0\u05d6\0\u4d2a"+
    "\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u4ec9\0\u4f1c\0\u4f6f\0\u4fc2"+
    "\0\u5015\0\u5068\0\u50bb\0\u510e\0\u5161\0\u51b4\0\u5207\0\u525a"+
    "\0\u52ad\0\u5300\0\u5353\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2"+
    "\0\u5545\0\u5598\0\u55eb\0\u563e\0\u2d11\0\u5691\0\u56e4\0\u5737"+
    "\0\u578a\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u5929\0\u597c\0\u59cf"+
    "\0\u5a22\0\u5a75\0\u5ac8\0\u5b1b\0\u0d4b\0\u5b6e\0\u5bc1\0\u5c14"+
    "\0\u5c67\0\u5cba\0\u5d0d\0\u5d60\0\u5db3\0\u5e06\0\u5e59\0\u5eac"+
    "\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8\0\u604b\0\u609e\0\u60f1\0\u6144"+
    "\0\u6197\0\u61ea\0\u623d\0\u6290\0\u62e3\0\u6336\0\u6389\0\u63dc"+
    "\0\u642f\0\u39b6\0\u6482\0\u64d5\0\u6528\0\u657b\0\u65ce\0\u6621"+
    "\0\u6674\0\u66c7\0\u671a\0\u676d\0\u67c0\0\u6813\0\u6866\0\u68b9"+
    "\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58\0\u6aab\0\u6afe\0\u6b51"+
    "\0\u6ba4\0\u6bf7\0\u6c4a\0\u6c9d\0\u6cf0\0\u6d43\0\u6d96\0\u6de9"+
    "\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35\0\u6f88\0\u6fdb\0\u702e\0\u7081"+
    "\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220\0\u7273\0\u72c6\0\u7319"+
    "\0\u736c\0\u73bf\0\u7412\0\u7465\0\u74b8\0\u750b\0\u755e\0\u75b1"+
    "\0\u7604\0\u7657\0\u76aa\0\u76fd\0\u7750\0\u77a3\0\u05d6\0\u77f6"+
    "\0\u7849\0\u789c\0\u78ef\0\u7942\0\u7995\0\u79e8\0\u7a3b\0\u7a8e"+
    "\0\u7ae1\0\u7b34\0\u7b87\0\u7bda\0\u7c2d\0\u7c80\0\u7cd3\0\u7d26"+
    "\0\u7d79\0\u7dcc\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18\0\u7f6b\0\u7fbe"+
    "\0\u8011\0\u58d6\0\u8064\0\u80b7\0\u810a\0\u815d\0\u81b0\0\u2f03"+
    "\0\u8203\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2\0\u83f5\0\u05d6"+
    "\0\u8448\0\u849b\0\u84ee\0\u1374\0\u8541\0\u8594\0\u85e7\0\u863a"+
    "\0\u868d\0\u86e0\0\u8733\0\u8786\0\u87d9\0\u882c\0\u887f\0\u88d2"+
    "\0\u8925\0\u8978\0\u89cb\0\u8a1e\0\u8a71\0\u1374\0\u8ac4\0\u1374"+
    "\0\u8b17\0\u8b6a\0\u8bbd\0\u8c10\0\u8c63\0\u8cb6\0\u8d09\0\u8d5c"+
    "\0\u8daf\0\u8e02\0\u8e55\0\u8ea8\0\u8efb\0\u4a92\0\u05d6\0\u8f4e"+
    "\0\u8fa1\0\u8ff4\0\u9047\0\u909a\0\u90ed\0\u78ef\0\u9140\0\u9193"+
    "\0\u91e6\0\u9239\0\u928c\0\u92df\0\u9332\0\u9385\0\u93d8\0\u93d8"+
    "\0\u942b\0\u947e\0\u94d1\0\u9524\0\u9577\0\u95ca\0\u961d\0\u9670"+
    "\0\u96c3\0\u9716\0\u9769\0\u97bc\0\u980f\0\u6528\0\u9862\0\u98b5"+
    "\0\u9908\0\u995b\0\u99ae\0\u9a01\0\u9a54\0\u9aa7\0\u9afa\0\u9b4d"+
    "\0\u9ba0\0\u9bf3\0\u9c46\0\u9c99\0\u9cec\0\u9d3f\0\u9d92\0\u9de5"+
    "\0\u9e38\0\u9e8b\0\u9ede\0\u9f31\0\u8ff4\0\u9f84\0\u9fd7\0\ua02a"+
    "\0\ua07d\0\ua0d0\0\ua123\0\ua176\0\ua1c9\0\ua21c\0\ua26f\0\ua2c2"+
    "\0\ua315\0\ua368\0\ua3bb\0\ua40e\0\ua461\0\ua4b4\0\ua507\0\ua55a"+
    "\0\ua5ad\0\ua600\0\ua653\0\ua6a6\0\ua6f9\0\ua74c\0\ua79f\0\ua7f2"+
    "\0\ua845\0\ua898\0\ua8eb\0\u1fc6\0\ua93e\0\ua991\0\ua9e4\0\uaa37"+
    "\0\uaa8a\0\uaadd\0\uab30\0\uab83\0\uabd6\0\uac29\0\uac7c\0\uaccf"+
    "\0\uad22\0\uad75\0\uadc8\0\uae1b\0\uae6e\0\uaec1\0\uaf14\0\u05d6"+
    "\0\uaf67\0\u05d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\115\21\2\27"+
    "\1\30\35\27\1\31\15\27\1\32\3\27\1\33\3\27"+
    "\1\34\34\27\2\35\1\36\46\35\1\37\51\35\2\40"+
    "\1\41\14\40\1\42\103\40\1\43\1\44\1\0\1\43"+
    "\1\25\2\43\1\45\1\46\6\43\1\47\25\43\1\50"+
    "\7\43\1\51\45\43\2\52\1\0\1\52\1\53\2\52"+
    "\2\53\1\54\1\55\1\56\1\57\1\60\1\61\1\53"+
    "\3\52\1\62\1\52\1\63\7\52\1\64\1\65\1\66"+
    "\5\52\1\53\7\52\1\53\1\67\1\61\1\60\1\54"+
    "\1\65\1\57\1\64\1\66\1\52\1\55\1\56\1\70"+
    "\1\71\1\72\1\52\1\73\1\74\1\63\1\52\1\75"+
    "\1\76\1\77\1\67\2\52\1\62\1\70\1\75\1\71"+
    "\1\72\1\74\1\52\1\77\1\52\1\73\2\52\7\100"+
    "\1\101\113\100\55\102\1\101\45\102\1\43\1\44\1\0"+
    "\1\43\1\25\2\43\1\103\1\104\6\43\1\105\25\43"+
    "\1\50\7\43\1\106\45\43\7\100\1\107\113\100\55\102"+
    "\1\107\45\102\1\110\1\25\1\111\1\112\1\25\1\113"+
    "\1\114\1\115\1\116\3\117\1\120\2\117\1\121\1\117"+
    "\1\122\1\123\1\117\1\122\1\124\1\125\2\110\2\117"+
    "\1\126\4\117\1\127\1\130\1\131\1\114\1\132\4\126"+
    "\3\50\1\131\1\133\1\117\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\2\117\1\146"+
    "\11\117\1\122\1\117\1\147\1\150\2\117\1\151\1\152"+
    "\1\117\1\153\1\154\3\117\2\155\1\156\4\155\1\157"+
    "\20\155\1\160\72\155\2\161\1\162\25\161\1\163\24\161"+
    "\1\164\45\161\2\165\1\166\30\165\1\167\22\165\1\170"+
    "\3\165\1\171\3\165\1\172\34\165\2\173\1\174\1\175"+
    "\52\173\1\170\3\173\1\171\3\173\1\172\34\173\2\21"+
    "\4\0\116\21\1\22\2\0\1\25\1\0\115\21\133\0"+
    "\1\176\6\177\1\0\6\177\6\0\4\177\10\0\1\200"+
    "\1\201\4\0\3\177\1\202\41\177\1\0\1\25\2\0"+
    "\1\25\116\0\4\26\1\0\1\26\1\203\114\26\2\27"+
    "\1\0\35\27\1\0\15\27\1\0\3\27\1\0\3\27"+
    "\1\0\34\27\40\0\1\204\141\0\1\205\122\0\1\206"+
    "\3\0\1\207\125\0\1\210\34\0\2\35\1\0\46\35"+
    "\1\0\51\35\17\0\1\211\103\0\2\40\1\0\14\40"+
    "\1\0\103\40\2\43\1\0\1\43\1\0\2\43\2\0"+
    "\6\43\1\0\25\43\1\0\7\43\1\0\46\43\1\44"+
    "\1\0\1\43\1\25\2\43\2\0\6\43\1\0\25\43"+
    "\1\0\7\43\1\0\45\43\17\0\1\47\103\0\2\52"+
    "\1\0\1\52\1\0\2\52\2\0\6\52\1\0\25\52"+
    "\1\0\7\52\1\0\47\52\1\0\1\52\1\0\2\52"+
    "\2\0\1\52\1\212\2\52\1\213\1\214\1\0\5\52"+
    "\1\215\11\52\1\216\5\52\1\0\7\52\1\0\1\52"+
    "\1\214\1\213\4\52\1\216\1\52\1\212\1\52\1\217"+
    "\1\220\2\52\1\221\1\52\1\215\10\52\1\217\1\52"+
    "\1\220\5\52\1\221\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\3\52\1\222\2\52\1\0\17\52\1\223\5\52"+
    "\1\0\7\52\1\0\5\52\1\222\1\52\1\223\3\52"+
    "\1\224\1\225\15\52\1\224\1\52\1\225\12\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\5\52\1\226"+
    "\17\52\1\0\7\52\1\0\21\52\1\226\25\52\1\0"+
    "\1\52\1\0\2\52\2\0\1\227\5\52\1\0\15\52"+
    "\1\230\1\231\6\52\1\0\7\52\1\0\3\52\1\227"+
    "\1\231\1\52\1\230\6\52\1\232\1\52\1\233\15\52"+
    "\1\232\4\52\1\233\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\234\3\52\1\0\15\52\1\235\7\52"+
    "\1\0\7\52\1\0\6\52\1\235\3\52\1\234\1\236"+
    "\16\52\1\236\14\52\1\0\1\52\1\0\2\52\2\0"+
    "\2\52\1\76\1\237\1\52\1\76\1\0\3\52\1\240"+
    "\12\52\1\241\1\242\5\52\1\0\7\52\1\0\1\243"+
    "\1\76\2\52\1\241\1\237\1\52\1\242\2\52\1\76"+
    "\1\244\4\52\1\76\5\52\1\243\2\52\1\240\1\244"+
    "\3\52\1\76\10\52\1\0\1\52\1\0\2\52\2\0"+
    "\2\52\1\76\1\233\2\52\1\0\5\52\1\245\7\52"+
    "\1\246\7\52\1\0\7\52\1\0\5\52\1\233\1\246"+
    "\3\52\1\76\1\247\1\250\3\52\1\251\1\245\1\252"+
    "\7\52\1\247\1\52\1\250\1\52\1\251\2\52\1\252"+
    "\5\52\1\0\1\52\1\0\2\52\2\0\6\52\1\0"+
    "\15\52\1\76\7\52\1\0\7\52\1\0\6\52\1\76"+
    "\40\52\1\0\1\52\1\0\2\52\2\0\3\52\1\253"+
    "\2\52\1\0\17\52\1\254\5\52\1\0\7\52\1\0"+
    "\5\52\1\253\1\52\1\254\3\52\1\255\16\52\1\255"+
    "\14\52\1\0\1\52\1\0\2\52\2\0\2\52\1\256"+
    "\1\257\2\52\1\0\25\52\1\0\7\52\1\0\5\52"+
    "\1\257\4\52\1\256\1\52\1\260\17\52\1\260\12\52"+
    "\1\0\1\52\1\0\2\52\2\0\6\52\1\0\25\52"+
    "\1\0\7\52\1\0\17\52\1\261\5\52\1\262\12\52"+
    "\1\262\1\52\1\261\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\76\2\52\1\263\1\0\17\52\1\264"+
    "\5\52\1\0\7\52\1\0\1\52\1\263\5\52\1\264"+
    "\2\52\1\76\14\52\1\76\17\52\1\0\1\52\1\0"+
    "\2\52\2\0\1\265\1\266\1\267\1\52\1\270\1\52"+
    "\1\0\3\52\1\271\1\52\1\272\17\52\1\0\7\52"+
    "\1\0\2\52\1\270\1\265\5\52\1\266\1\267\5\52"+
    "\1\273\1\272\7\52\1\271\4\52\1\273\10\52\1\0"+
    "\1\52\1\0\2\52\2\0\4\52\1\274\1\52\1\0"+
    "\3\52\1\275\1\52\1\276\7\52\1\76\7\52\1\0"+
    "\7\52\1\0\2\52\1\274\3\52\1\76\12\52\1\276"+
    "\7\52\1\275\15\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\277\5\52\1\0\7\52\1\0"+
    "\7\52\1\277\3\52\1\300\1\301\15\52\1\300\1\52"+
    "\1\301\12\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\5\52\1\302\11\52\1\303\5\52\1\0\7\52"+
    "\1\0\7\52\1\303\3\52\1\304\5\52\1\302\10\52"+
    "\1\304\14\52\1\0\1\52\1\0\2\52\2\0\3\52"+
    "\1\305\1\52\1\76\1\0\15\52\1\76\1\306\1\307"+
    "\5\52\1\0\7\52\1\0\1\52\1\76\2\52\1\306"+
    "\1\305\1\76\1\307\3\52\1\310\4\52\1\76\11\52"+
    "\1\310\3\52\1\76\10\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\3\52\1\311\13\52\1\312\5\52"+
    "\1\0\7\52\1\0\7\52\1\312\21\52\1\311\15\52"+
    "\1\0\1\52\1\0\2\52\2\0\3\52\1\313\2\52"+
    "\1\0\25\52\1\0\7\52\1\0\5\52\1\313\5\52"+
    "\1\314\16\52\1\314\12\52\7\100\1\0\113\100\55\102"+
    "\1\0\45\102\17\0\1\315\103\0\1\110\10\0\6\110"+
    "\1\0\6\110\1\0\4\110\1\0\4\110\16\0\45\110"+
    "\3\0\1\316\4\0\1\317\34\0\1\50\62\0\1\50"+
    "\37\0\1\50\65\0\1\320\22\0\1\321\11\0\1\50"+
    "\55\0\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\45\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\35\117\1\323\7\117\17\0\1\324\25\0"+
    "\1\50\55\0\1\325\10\0\6\325\1\0\1\325\2\122"+
    "\1\325\1\122\1\325\1\0\4\325\1\0\1\325\1\326"+
    "\1\327\1\330\1\0\1\331\14\0\4\325\1\327\1\325"+
    "\1\326\1\330\10\325\1\327\6\325\1\122\6\325\1\327"+
    "\7\325\10\0\6\325\1\0\1\325\1\332\1\333\1\325"+
    "\1\333\1\325\1\0\4\325\1\0\1\334\1\326\1\327"+
    "\1\330\1\0\1\331\14\0\4\325\1\327\1\325\1\326"+
    "\1\330\10\325\1\327\6\325\1\333\6\325\1\327\4\325"+
    "\1\334\1\325\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\35\117\1\335"+
    "\7\117\45\0\1\50\115\0\1\50\4\0\1\50\76\0"+
    "\2\331\1\0\1\331\60\0\1\331\61\0\2\50\55\0"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\1\336\11\117\1\337\24\117"+
    "\1\340\5\117\1\110\10\0\6\117\1\0\5\117\1\341"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\12\117"+
    "\1\342\17\117\1\343\12\117\1\110\10\0\6\117\1\0"+
    "\5\117\1\344\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\1\345\1\346\6\117\1\347\26\117\1\350\5\117"+
    "\1\110\10\0\6\117\1\0\5\117\1\351\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\5\117\1\352\1\353"+
    "\23\117\1\354\1\117\1\355\10\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\3\117\1\356\1\357\30\117\1\360\4\117\1\361"+
    "\2\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\34\117\1\362\10\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\3\117\1\363\2\117\1\364"+
    "\26\117\1\365\2\117\1\366\2\117\1\367\1\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\370\4\117\1\371\37\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\372\5\117\1\373\23\117\1\374"+
    "\1\117\1\375\10\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\7\117"+
    "\1\376\35\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\32\117\1\377"+
    "\12\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\12\117\1\u0100\21\117"+
    "\1\u0101\2\117\1\u0102\5\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\31\117\1\u0103\13\117\1\110\10\0\6\117\1\0\5\117"+
    "\1\u0104\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\7\117\1\u0105\22\117\1\u0106\12\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\7\117\1\u0107\24\117\1\u0108\10\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\32\117\1\355\1\117\1\u0109\10\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\34\117\1\u010a\10\117\2\155\1\0"+
    "\4\155\1\0\20\155\1\0\72\155\2\u010b\1\0\22\u010b"+
    "\1\u010c\73\u010b\1\u010d\1\u010b\2\161\1\0\25\161\1\0"+
    "\24\161\1\0\45\161\2\165\1\0\30\165\1\0\22\165"+
    "\1\0\3\165\1\0\3\165\1\0\34\165\10\0\1\u010e"+
    "\171\0\1\u010f\122\0\1\u0110\3\0\1\u0111\125\0\1\u0112"+
    "\34\0\2\173\2\0\52\173\1\0\3\173\1\0\3\173"+
    "\1\0\34\173\10\0\1\u0113\123\0\6\u0114\1\0\6\u0114"+
    "\6\0\4\u0114\16\0\45\u0114\11\0\6\177\1\0\6\177"+
    "\6\0\4\177\16\0\45\177\40\0\1\u0115\73\0\6\177"+
    "\1\0\6\177\6\0\4\177\16\0\11\177\1\u0116\33\177"+
    "\17\0\1\u0117\162\0\1\u0118\123\0\1\u0119\126\0\1\u011a"+
    "\124\0\1\u011b\34\0\2\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\u011c\3\52\1\0\25\52\1\0\7\52"+
    "\1\0\12\52\1\u011c\34\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\13\52"+
    "\1\u011d\16\52\1\u011d\14\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\u011e\3\52\1\0\25\52\1\0\7\52"+
    "\1\0\12\52\1\u011e\3\52\1\226\20\52\1\226\7\52"+
    "\1\0\1\52\1\0\2\52\2\0\4\52\1\76\1\52"+
    "\1\0\3\52\1\76\21\52\1\0\7\52\1\0\2\52"+
    "\1\76\26\52\1\76\15\52\1\0\1\52\1\0\2\52"+
    "\2\0\1\52\1\u011f\1\u0120\3\52\1\0\15\52\1\u0121"+
    "\7\52\1\0\7\52\1\0\6\52\1\u0121\2\52\1\u011f"+
    "\1\u0120\34\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\17\52\1\u0122\22\52"+
    "\1\u0122\4\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\5\52\1\u0123\17\52\1\0\7\52\1\0\21\52"+
    "\1\u0123\25\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\13\52\1\u0124\16\52"+
    "\1\u0124\14\52\1\0\1\52\1\0\2\52\2\0\5\52"+
    "\1\u0125\1\0\25\52\1\0\7\52\1\0\1\52\1\u0125"+
    "\45\52\1\0\1\52\1\0\2\52\2\0\6\52\1\0"+
    "\25\52\1\0\7\52\1\0\15\52\1\u0126\17\52\1\u0126"+
    "\11\52\1\0\1\52\1\0\2\52\2\0\4\52\1\u011f"+
    "\1\52\1\0\25\52\1\0\7\52\1\0\2\52\1\u011f"+
    "\12\52\1\u0127\17\52\1\u0127\11\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\15\52\1\u0128\7\52\1\0"+
    "\7\52\1\0\6\52\1\u0128\10\52\1\u0129\1\u0125\15\52"+
    "\1\u0125\3\52\1\u0129\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\15\52\1\u0125\7\52\1\0\7\52"+
    "\1\0\6\52\1\u0125\40\52\1\0\1\52\1\0\2\52"+
    "\2\0\3\52\1\u012a\2\52\1\0\25\52\1\0\7\52"+
    "\1\0\5\52\1\u012a\41\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\13\52"+
    "\1\u012b\16\52\1\u012b\14\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\u012c\3\52\1\0\25\52\1\0\7\52"+
    "\1\0\12\52\1\u012c\34\52\1\0\1\52\1\0\2\52"+
    "\2\0\1\76\3\52\1\u012d\1\52\1\0\25\52\1\0"+
    "\7\52\1\0\2\52\1\u012d\1\76\43\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\22\52\1\76\16\52\1\76\5\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\17\52\1\76\5\52"+
    "\1\0\7\52\1\0\7\52\1\76\4\52\1\u012e\17\52"+
    "\1\u012e\12\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\13\52\1\u012f\16\52"+
    "\1\u012f\14\52\1\0\1\52\1\0\2\52\2\0\2\52"+
    "\1\u0130\3\52\1\0\25\52\1\0\7\52\1\0\12\52"+
    "\1\u0130\34\52\1\0\1\52\1\0\2\52\2\0\5\52"+
    "\1\226\1\0\25\52\1\0\7\52\1\0\1\52\1\226"+
    "\15\52\1\u0125\22\52\1\u0125\4\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\14\52\1\250\17\52\1\250\12\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\14\52\1\u0131\17\52\1\u0131\12\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\14\52\1\u0132\10\52\1\0"+
    "\7\52\1\0\43\52\1\u0132\3\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\17\52\1\u0133\5\52\1\0"+
    "\7\52\1\0\7\52\1\u0133\37\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\3\52\1\226\21\52\1\0"+
    "\7\52\1\0\31\52\1\226\15\52\1\0\1\52\1\0"+
    "\2\52\2\0\5\52\1\u0134\1\0\25\52\1\0\7\52"+
    "\1\0\1\52\1\u0134\45\52\1\0\1\52\1\0\2\52"+
    "\2\0\3\52\1\u0135\2\52\1\0\25\52\1\0\7\52"+
    "\1\0\5\52\1\u0135\6\52\1\u0136\17\52\1\u0136\12\52"+
    "\1\0\1\52\1\0\2\52\2\0\1\u0137\5\52\1\0"+
    "\25\52\1\0\7\52\1\0\3\52\1\u0137\43\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\20\52\1\u0138\15\52\1\u0138\10\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\14\52\1\76\17\52\1\76\12\52\1\0"+
    "\1\52\1\0\2\52\2\0\1\u0139\5\52\1\0\25\52"+
    "\1\0\7\52\1\0\3\52\1\u0139\43\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\15\52\1\u013a\17\52\1\u013a\11\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\22\52\1\u013b\16\52\1\u013b\5\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\3\52\1\u013c\21\52"+
    "\1\0\7\52\1\0\16\52\1\u013d\12\52\1\u013c\5\52"+
    "\1\u013d\7\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\13\52\1\u013e\16\52"+
    "\1\u013e\14\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\17\52\1\u013f\5\52\1\0\7\52\1\0\7\52"+
    "\1\u013f\12\52\1\u0140\16\52\1\u0140\5\52\1\0\1\52"+
    "\1\0\2\52\2\0\2\52\1\u0141\3\52\1\0\25\52"+
    "\1\0\7\52\1\0\12\52\1\u0141\1\52\1\u0126\1\u0142"+
    "\16\52\1\u0126\1\u0142\11\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\3\52\1\u0143\21\52\1\0\7\52"+
    "\1\0\31\52\1\u0143\15\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\17\52\1\u0144\5\52\1\0\7\52"+
    "\1\0\7\52\1\u0144\37\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\17\52"+
    "\1\u0145\22\52\1\u0145\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\13\52"+
    "\1\u0146\16\52\1\u0146\14\52\1\0\1\52\1\0\2\52"+
    "\2\0\3\52\1\u0147\2\52\1\0\25\52\1\0\7\52"+
    "\1\0\5\52\1\u0147\41\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\u0148\3\52\1\0\25\52\1\0\7\52"+
    "\1\0\12\52\1\u0148\34\52\1\0\1\52\1\0\2\52"+
    "\2\0\5\52\1\u0149\1\0\17\52\1\u014a\5\52\1\0"+
    "\7\52\1\0\1\52\1\u0149\5\52\1\u014a\37\52\1\0"+
    "\1\52\1\0\2\52\2\0\4\52\1\u014b\1\52\1\0"+
    "\25\52\1\0\7\52\1\0\2\52\1\u014b\44\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\3\52\1\314"+
    "\21\52\1\0\7\52\1\0\31\52\1\314\15\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\20\52\1\u014c\15\52\1\u014c\10\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\20\52\1\u014d\15\52\1\u014d\10\52\1\0"+
    "\1\52\1\0\2\52\2\0\5\52\1\u014e\1\0\25\52"+
    "\1\0\7\52\1\0\1\52\1\u014e\45\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\30\52\1\u0121\16\52\1\0\1\52\1\0\2\52"+
    "\2\0\5\52\1\u014f\1\0\25\52\1\0\7\52\1\0"+
    "\1\52\1\u014f\45\52\1\0\1\52\1\0\2\52\2\0"+
    "\1\u0142\5\52\1\0\25\52\1\0\7\52\1\0\3\52"+
    "\1\u0142\43\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\25\52\1\76\12\52"+
    "\1\76\6\52\1\0\1\52\1\0\2\52\2\0\1\u0150"+
    "\5\52\1\0\3\52\1\314\11\52\1\230\1\u0151\1\u0152"+
    "\5\52\1\0\7\52\1\0\3\52\1\u0150\1\u0151\1\52"+
    "\1\230\1\u0152\21\52\1\314\15\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\15\52\1\u0153\7\52\1\0"+
    "\7\52\1\0\6\52\1\u0153\40\52\1\0\1\52\1\0"+
    "\2\52\2\0\5\52\1\u0154\1\0\25\52\1\0\7\52"+
    "\1\0\1\52\1\u0154\13\52\1\u0155\17\52\1\u0155\11\52"+
    "\1\0\1\52\1\0\2\52\2\0\2\52\1\u0156\1\52"+
    "\1\76\1\52\1\0\25\52\1\0\7\52\1\0\2\52"+
    "\1\76\7\52\1\u0156\34\52\1\0\1\52\1\0\2\52"+
    "\2\0\2\52\1\76\3\52\1\0\25\52\1\0\7\52"+
    "\1\0\12\52\1\76\1\u0157\11\52\1\76\4\52\1\u0157"+
    "\5\52\1\76\6\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\15\52\1\76"+
    "\17\52\1\76\11\52\1\0\1\52\1\0\2\52\2\0"+
    "\5\52\1\u0158\1\0\15\52\1\76\7\52\1\0\7\52"+
    "\1\0\1\52\1\u0158\4\52\1\76\40\52\1\0\1\52"+
    "\1\0\2\52\2\0\5\52\1\u0159\1\0\25\52\1\0"+
    "\7\52\1\0\1\52\1\u0159\45\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\20\52\1\76\15\52\1\76\10\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\16\52\1\u015a\20\52\1\u015a\7\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\20\52\1\u015b\15\52\1\u015b\10\52\1\0\1\52\1\0"+
    "\2\52\2\0\2\52\1\76\3\52\1\0\25\52\1\0"+
    "\7\52\1\0\12\52\1\76\32\52\11\0\1\u015c\47\0"+
    "\1\u015c\74\0\1\u015d\67\0\1\110\10\0\6\110\1\0"+
    "\5\110\1\u015e\1\0\4\110\1\0\4\110\16\0\46\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\4\117\1\u015f\40\117\17\0\1\126"+
    "\25\0\1\50\55\0\1\325\10\0\6\325\1\0\6\325"+
    "\1\0\4\325\1\0\4\325\16\0\46\325\10\0\6\325"+
    "\1\0\1\325\2\u0160\1\325\1\u0160\1\325\1\0\4\325"+
    "\1\0\4\325\1\u0161\3\0\1\u0161\11\0\27\325\1\u0160"+
    "\16\325\10\0\6\325\1\0\1\325\2\331\1\325\1\331"+
    "\1\325\1\0\4\325\1\0\2\325\1\327\1\330\16\0"+
    "\4\325\1\327\2\325\1\330\10\325\1\327\6\325\1\331"+
    "\6\325\1\327\7\325\10\0\6\325\1\0\1\325\2\332"+
    "\1\325\1\332\1\325\1\0\4\325\1\0\2\325\1\327"+
    "\1\330\1\0\1\331\14\0\4\325\1\327\2\325\1\330"+
    "\10\325\1\327\6\325\1\332\6\325\1\327\7\325\10\0"+
    "\6\325\1\0\1\325\1\332\1\333\1\325\1\333\1\325"+
    "\1\0\4\325\1\0\1\325\1\u0162\1\327\1\330\1\0"+
    "\1\331\14\0\4\325\1\327\1\325\1\u0162\1\330\10\325"+
    "\1\327\6\325\1\333\6\325\1\327\7\325\10\0\1\325"+
    "\1\u0163\4\325\1\0\1\325\4\u0163\1\325\1\0\4\325"+
    "\1\0\2\325\2\u0163\16\0\4\325\1\u0163\2\325\1\u0163"+
    "\1\325\1\u0163\1\325\1\u0163\4\325\1\u0163\6\325\1\u0163"+
    "\1\325\2\u0163\3\325\1\u0163\6\325\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\7\117\1\u0164\35\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\5\117\1\u0165\4\117\1\u0166\32\117\1\110\10\0\6\117"+
    "\1\0\5\117\1\u0167\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\32\117\1\u0168\4\117\1\357\5\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\2\117\1\u0169\42\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\31\117\1\u016a\13\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\5\117\1\u016b\26\117\1\u016c\10\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\11\117\1\u016d\1\u016e\32\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\2\117\1\u016f\42\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\34\117\1\u0170\10\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\32\117\1\u0171\12\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\5\117"+
    "\1\u0172\37\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\35\117\1\u0173"+
    "\7\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\35\117\1\u0174\7\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\35\117\1\u0175\7\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\34\117\1\u0176\10\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\6\117\1\u0177\36\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\12\117\1\357\32\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\2\117\1\u0178"+
    "\1\117\16\0\15\117\1\u0179\27\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\1\117\1\u017a\1\117\1\u017b\41\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\2\117\1\u017c\42\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\35\117\1\u017d\7\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\11\117\1\u017e\33\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\3\117"+
    "\1\u017f\41\117\1\110\10\0\6\117\1\0\5\117\1\u0180"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\45\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\32\117\1\u0181\12\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\117\1\u0182\1\u0183\42\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\5\117\1\u0184\37\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\1\117\1\u0185\43\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\32\117\1\u0186\12\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\32\117\1\u0187\12\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\1\117"+
    "\1\u0188\1\117\1\u017f\41\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\35\117\1\u0189\7\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\1\117"+
    "\1\u018a\43\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\15\117\1\357"+
    "\27\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\7\117\1\u018b\35\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\34\117\1\u018c\10\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\117\1\u018d\43\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\3\117\1\u018e\41\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\6\117\1\u018f\36\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\10\117\1\357\34\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\1\117"+
    "\1\u0190\43\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\4\117\1\u0191"+
    "\1\117\1\u0192\22\117\1\u0193\13\117\1\110\10\0\6\117"+
    "\1\0\5\117\1\u0194\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\45\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\5\117"+
    "\1\u0195\1\u0196\36\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\1\117"+
    "\1\u0197\43\117\12\0\1\u0198\6\0\4\u0198\11\0\2\u0198"+
    "\22\0\1\u0198\2\0\1\u0198\1\0\1\u0198\1\0\1\u0198"+
    "\4\0\1\u0198\6\0\1\u0198\1\0\2\u0198\3\0\1\u0198"+
    "\20\0\1\u0199\6\0\4\u0199\11\0\2\u0199\22\0\1\u0199"+
    "\2\0\1\u0199\1\0\1\u0199\1\0\1\u0199\4\0\1\u0199"+
    "\6\0\1\u0199\1\0\2\u0199\3\0\1\u0199\65\0\1\u019a"+
    "\123\0\1\u019b\126\0\1\u019c\124\0\1\u019d\45\0\1\u019e"+
    "\47\0\1\u019e\101\0\1\u019f\73\0\6\177\1\0\6\177"+
    "\6\0\4\177\16\0\12\177\1\u01a0\32\177\60\0\1\u01a1"+
    "\114\0\1\u01a2\135\0\1\u0119\76\0\1\u01a3\61\0\2\52"+
    "\1\0\1\52\1\0\2\52\2\0\3\52\1\u01a4\2\52"+
    "\1\0\25\52\1\0\7\52\1\0\5\52\1\u01a4\41\52"+
    "\1\0\1\52\1\0\2\52\2\0\1\52\1\u013d\4\52"+
    "\1\0\25\52\1\0\7\52\1\0\11\52\1\u013d\3\52"+
    "\1\76\17\52\1\76\11\52\1\0\1\52\1\0\2\52"+
    "\2\0\3\52\1\u01a5\2\52\1\0\25\52\1\0\7\52"+
    "\1\0\5\52\1\u01a5\6\52\1\u01a6\17\52\1\u01a6\12\52"+
    "\1\0\1\52\1\0\2\52\2\0\5\52\1\u01a7\1\0"+
    "\25\52\1\0\7\52\1\0\1\52\1\u01a7\45\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\25\52\1\u013d\12\52\1\u013d\6\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\17\52\1\u01a8"+
    "\5\52\1\0\7\52\1\0\7\52\1\u01a8\37\52\1\0"+
    "\1\52\1\0\2\52\2\0\4\52\1\76\1\52\1\0"+
    "\25\52\1\0\7\52\1\0\2\52\1\76\44\52\1\0"+
    "\1\52\1\0\2\52\2\0\2\52\1\u01a9\3\52\1\0"+
    "\25\52\1\0\7\52\1\0\12\52\1\u01a9\34\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\15\52\1\u0145"+
    "\7\52\1\0\7\52\1\0\6\52\1\u0145\40\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\17\52\1\76"+
    "\5\52\1\0\7\52\1\0\7\52\1\76\37\52\1\0"+
    "\1\52\1\0\2\52\2\0\5\52\1\u013d\1\0\25\52"+
    "\1\0\7\52\1\0\1\52\1\u013d\45\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\25\52\1\u01aa\12\52\1\u01aa\6\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\22\52\1\u01ab\16\52\1\u01ab\5\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\17\52\1\u01ac\22\52\1\u01ac\4\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\15\52\1\u01ad\17\52\1\u01ad\11\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\16\52\1\u013d\20\52\1\u013d\7\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\13\52\1\u01ae\16\52\1\u01ae\14\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\5\52\1\u0142\17\52"+
    "\1\0\7\52\1\0\21\52\1\u0142\25\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\22\52\1\u014d\16\52\1\u014d\5\52\1\0\1\52"+
    "\1\0\2\52\2\0\3\52\1\u01af\2\52\1\0\25\52"+
    "\1\0\7\52\1\0\5\52\1\u01af\41\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\13\52\1\u0141\16\52\1\u0141\14\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\14\52\1\u0142\17\52\1\u0142\12\52\1\0\1\52"+
    "\1\0\2\52\2\0\5\52\1\u01b0\1\0\25\52\1\0"+
    "\7\52\1\0\1\52\1\u01b0\45\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\13\52\1\311\16\52\1\311\14\52\1\0\1\52\1\0"+
    "\2\52\2\0\5\52\1\u01b1\1\0\25\52\1\0\7\52"+
    "\1\0\1\52\1\u01b1\45\52\1\0\1\52\1\0\2\52"+
    "\2\0\1\52\1\u01b2\4\52\1\0\25\52\1\0\7\52"+
    "\1\0\11\52\1\u01b2\35\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\17\52\1\u01b3\5\52\1\0\7\52"+
    "\1\0\7\52\1\u01b3\37\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\16\52"+
    "\1\76\20\52\1\76\7\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\14\52"+
    "\1\u01b4\17\52\1\u01b4\12\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\23\52"+
    "\1\76\7\52\1\76\13\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\17\52\1\u01b5\5\52\1\0\7\52"+
    "\1\0\7\52\1\u01b5\37\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\17\52\1\u0145\5\52\1\0\7\52"+
    "\1\0\7\52\1\u0145\37\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\17\52\1\314\5\52\1\0\7\52"+
    "\1\0\7\52\1\314\37\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\17\52"+
    "\1\u01b6\22\52\1\u01b6\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\15\52\1\u01b7\7\52\1\0\7\52"+
    "\1\0\6\52\1\u01b7\40\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\5\52\1\u01b8\17\52\1\0\7\52"+
    "\1\0\21\52\1\u01b8\25\52\1\0\1\52\1\0\2\52"+
    "\2\0\6\52\1\0\25\52\1\0\7\52\1\0\17\52"+
    "\1\76\22\52\1\76\4\52\1\0\1\52\1\0\2\52"+
    "\2\0\5\52\1\76\1\0\25\52\1\0\7\52\1\0"+
    "\1\52\1\76\45\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\311\5\52\1\0\7\52\1\0"+
    "\7\52\1\311\37\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\15\52\1\u01b9"+
    "\17\52\1\u01b9\11\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\20\52\1\u01ba"+
    "\15\52\1\u01ba\10\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\20\52\1\u0125"+
    "\15\52\1\u0125\10\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\14\52\1\u01bb"+
    "\17\52\1\u01bb\12\52\1\0\1\52\1\0\2\52\2\0"+
    "\3\52\1\u01bc\2\52\1\0\25\52\1\0\7\52\1\0"+
    "\5\52\1\u01bc\41\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\13\52\1\76"+
    "\16\52\1\76\14\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\15\52\1\u01bd\7\52\1\0\7\52\1\0"+
    "\6\52\1\u01bd\40\52\1\0\1\52\1\0\2\52\2\0"+
    "\3\52\1\251\2\52\1\0\25\52\1\0\7\52\1\0"+
    "\5\52\1\251\41\52\1\0\1\52\1\0\2\52\2\0"+
    "\2\52\1\u01be\3\52\1\0\25\52\1\0\7\52\1\0"+
    "\12\52\1\u01be\34\52\1\0\1\52\1\0\2\52\2\0"+
    "\3\52\1\u01b1\2\52\1\0\25\52\1\0\7\52\1\0"+
    "\5\52\1\u01b1\14\52\1\u01ab\16\52\1\u01ab\5\52\1\0"+
    "\1\52\1\0\2\52\2\0\4\52\1\u012d\1\52\1\0"+
    "\25\52\1\0\7\52\1\0\2\52\1\u012d\44\52\1\0"+
    "\1\52\1\0\2\52\2\0\1\52\1\212\4\52\1\0"+
    "\25\52\1\0\7\52\1\0\11\52\1\212\35\52\1\0"+
    "\1\52\1\0\2\52\2\0\2\52\1\u01bf\3\52\1\0"+
    "\25\52\1\0\7\52\1\0\12\52\1\u01bf\34\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\17\52\1\u01c0\22\52\1\u01c0\4\52\1\0"+
    "\1\52\1\0\2\52\2\0\5\52\1\u01c1\1\0\25\52"+
    "\1\0\7\52\1\0\1\52\1\u01c1\45\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\17\52\1\314\5\52"+
    "\1\0\7\52\1\0\7\52\1\314\3\52\1\76\16\52"+
    "\1\76\14\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\5\52\1\76\17\52\1\0\7\52\1\0\21\52"+
    "\1\76\25\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\23\52\1\76\1\u01c2"+
    "\6\52\1\76\13\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\15\52\1\u01c3\7\52\1\0\7\52\1\0"+
    "\6\52\1\u01c3\40\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\13\52\1\u01c4"+
    "\16\52\1\u01c4\14\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\13\52\1\u01c5"+
    "\16\52\1\u01c5\14\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\22\52\1\u01c6"+
    "\16\52\1\u01c6\5\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\251\5\52\1\0\7\52\1\0"+
    "\7\52\1\251\35\52\12\0\1\u01c7\54\0\1\u01c7\43\0"+
    "\1\u01c8\112\0\1\110\10\0\1\110\1\u01c9\4\110\1\0"+
    "\1\110\4\u01c9\1\110\1\0\4\110\1\0\2\110\2\u01c9"+
    "\16\0\4\110\1\u01c9\2\110\1\u01c9\1\110\1\u01c9\1\110"+
    "\1\u01c9\4\110\1\u01c9\6\110\1\u01c9\1\110\2\u01c9\3\110"+
    "\1\u01c9\7\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\5\117\1\u01ca\37\117"+
    "\1\325\10\0\6\325\1\0\1\325\2\u0160\1\325\1\u0160"+
    "\1\325\1\0\4\325\1\0\2\325\1\327\1\325\16\0"+
    "\4\325\1\327\13\325\1\327\6\325\1\u0160\6\325\1\327"+
    "\6\325\21\0\2\u0160\1\0\1\u0160\60\0\1\u0160\15\0"+
    "\1\325\10\0\1\325\1\u0163\4\325\1\0\1\325\4\u0163"+
    "\1\325\1\0\4\325\1\0\1\325\1\u0162\2\u0163\16\0"+
    "\4\325\1\u0163\1\325\1\u0162\1\u0163\1\325\1\u0163\1\325"+
    "\1\u0163\4\325\1\u0163\6\325\1\u0163\1\325\2\u0163\3\325"+
    "\1\u0163\6\325\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\3\117\1\363"+
    "\41\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\3\117\1\357\41\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\34\117\1\u01cb\10\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\7\117\1\u01cc\35\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\35\117\1\u01cd\7\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\7\117\1\u01ce\35\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\6\117\1\u01cf\36\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\40\117"+
    "\1\u01d0\4\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\1\117\1\u01d1"+
    "\43\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\33\117\1\u01d2\11\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\3\117\1\u01d3\41\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\7\117\1\355\35\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\12\117\1\u01d4\32\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\1\117\1\u01cf\43\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\1\117\1\u0188\43\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\11\117"+
    "\1\u01d5\33\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\11\117\1\u01d6"+
    "\33\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\32\117\1\u01d7\12\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\32\117\1\u01d4\12\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\3\117\1\u0167\41\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\5\117\1\u01d8\37\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\32\117\1\u01d9\12\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\7\117\1\u01da\35\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\1\117"+
    "\1\u01db\43\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\6\117\1\u01dc"+
    "\25\117\1\u01dd\10\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\41\117"+
    "\1\u01de\3\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\32\117\1\u01df"+
    "\12\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\7\117\1\357\35\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\42\117\1\357\2\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\6\117\1\u01e0\36\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\7\117\1\u01e1\35\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\34\117\1\u01dd\10\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\6\117\1\u017f\36\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\1\357"+
    "\44\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\12\117\1\u01de\32\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\3\117\1\u0165\41\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\11\117\1\u0185\33\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\1\117\1\u01e2\1\117\1\u01e3\41\117\1\110"+
    "\10\0\6\117\1\0\5\117\1\u01e4\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\45\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\32\117\1\u01e5\12\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\6\117\1\u01e6\36\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\7\117"+
    "\1\u01de\35\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\1\117\1\u01e7"+
    "\43\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\6\117\1\357\36\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\5\117\1\u01e8\37\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\32\117\1\u01e9\12\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\7\117\1\u01ea\35\117\1\110\10\0\6\117"+
    "\1\0\5\117\1\u01eb\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\45\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\31\117"+
    "\1\u01ec\13\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\36\117\1\357"+
    "\6\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\32\117\1\u01ed\12\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\34\117\1\357\10\117\12\0"+
    "\1\u01ee\6\0\4\u01ee\11\0\2\u01ee\22\0\1\u01ee\2\0"+
    "\1\u01ee\1\0\1\u01ee\1\0\1\u01ee\4\0\1\u01ee\6\0"+
    "\1\u01ee\1\0\2\u01ee\3\0\1\u01ee\20\0\1\u01ef\6\0"+
    "\4\u01ef\11\0\2\u01ef\22\0\1\u01ef\2\0\1\u01ef\1\0"+
    "\1\u01ef\1\0\1\u01ef\4\0\1\u01ef\6\0\1\u01ef\1\0"+
    "\2\u01ef\3\0\1\u01ef\66\0\1\u01f0\114\0\1\u01f1\135\0"+
    "\1\u019b\76\0\1\u01f2\73\0\1\u01f3\54\0\1\u01f3\44\0"+
    "\6\177\1\0\6\177\6\0\4\177\16\0\5\177\1\u01f4"+
    "\37\177\52\0\1\u01a2\6\0\1\u0119\51\0\1\u01f5\117\0"+
    "\2\u01f6\1\0\7\u01a3\1\0\6\u01a3\1\0\1\u01f6\1\0"+
    "\1\u01f6\1\u01a3\1\u01f6\4\u01a3\2\u01f6\1\0\3\u01f6\1\0"+
    "\7\u01f6\45\u01a3\2\52\1\0\1\52\1\0\2\52\2\0"+
    "\4\52\1\u0142\1\52\1\0\25\52\1\0\7\52\1\0"+
    "\2\52\1\u0142\44\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\23\52\1\u0125"+
    "\7\52\1\u0125\13\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\15\52\1\233"+
    "\17\52\1\233\11\52\1\0\1\52\1\0\2\52\2\0"+
    "\3\52\1\u01b1\2\52\1\0\25\52\1\0\7\52\1\0"+
    "\5\52\1\u01b1\41\52\1\0\1\52\1\0\2\52\2\0"+
    "\1\52\1\u0142\4\52\1\0\25\52\1\0\7\52\1\0"+
    "\11\52\1\u0142\35\52\1\0\1\52\1\0\2\52\2\0"+
    "\1\52\1\u0125\4\52\1\0\25\52\1\0\7\52\1\0"+
    "\11\52\1\u0125\35\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\13\52\1\u01f7"+
    "\16\52\1\u01f7\14\52\1\0\1\52\1\0\2\52\2\0"+
    "\2\52\1\u01f8\3\52\1\0\25\52\1\0\7\52\1\0"+
    "\12\52\1\u01f8\34\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\u01f9\5\52\1\0\7\52\1\0"+
    "\7\52\1\u01f9\3\52\1\u01b5\16\52\1\u01b5\14\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\20\52\1\u01fa\15\52\1\u01fa\10\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\17\52\1\u0125\22\52\1\u0125\4\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\15\52\1\u01fb\17\52\1\u01fb\11\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\13\52\1\u01fc\16\52\1\u01fc\14\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\14\52\1\306\17\52\1\306\12\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\23\52\1\u01fd\7\52\1\u01fd\13\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\16\52\1\u01fe"+
    "\6\52\1\0\7\52\1\0\4\52\1\u01fe\42\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\5\52\1\u01b5"+
    "\17\52\1\0\7\52\1\0\21\52\1\u01b5\25\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\15\52\1\311\17\52\1\311\11\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\17\52\1\u01ff"+
    "\5\52\1\0\7\52\1\0\7\52\1\u01ff\37\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\20\52\1\u0200\15\52\1\u0200\10\52\1\0"+
    "\1\52\1\0\2\52\2\0\2\52\1\u0125\3\52\1\0"+
    "\25\52\1\0\7\52\1\0\12\52\1\u0125\34\52\1\0"+
    "\1\52\1\0\2\52\2\0\5\52\1\u0201\1\0\25\52"+
    "\1\0\7\52\1\0\1\52\1\u0201\45\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\15\52\1\u0202\17\52\1\u0202\11\52\1\0\1\52"+
    "\1\0\2\52\2\0\1\52\1\226\4\52\1\0\25\52"+
    "\1\0\7\52\1\0\11\52\1\226\35\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\17\52\1\u0142\5\52"+
    "\1\0\7\52\1\0\7\52\1\u0142\37\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\17\52\1\u0203\5\52"+
    "\1\0\7\52\1\0\7\52\1\u0203\37\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\13\52\1\u0204\16\52\1\u0204\14\52\1\0\1\52"+
    "\1\0\2\52\2\0\3\52\1\u0205\2\52\1\0\25\52"+
    "\1\0\7\52\1\0\5\52\1\u0205\41\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\5\52\1\u0206\17\52"+
    "\1\0\7\52\1\0\21\52\1\u0206\25\52\1\0\1\52"+
    "\1\0\2\52\2\0\6\52\1\0\25\52\1\0\7\52"+
    "\1\0\14\52\1\233\17\52\1\233\12\52\1\0\1\52"+
    "\1\0\2\52\2\0\3\52\1\u0207\2\52\1\0\25\52"+
    "\1\0\7\52\1\0\5\52\1\u0207\41\52\1\0\1\52"+
    "\1\0\2\52\2\0\5\52\1\u0208\1\0\15\52\1\u0209"+
    "\7\52\1\0\7\52\1\0\1\52\1\u0208\4\52\1\u0209"+
    "\13\52\1\u020a\16\52\1\u020a\5\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\17\52\1\306\5\52\1\0"+
    "\7\52\1\0\7\52\1\306\35\52\13\0\1\u020b\54\0"+
    "\1\u020b\32\0\1\110\10\0\1\110\1\u020c\4\110\1\0"+
    "\1\110\4\u020c\1\110\1\0\4\110\1\0\2\110\2\u020c"+
    "\16\0\4\110\1\u020c\2\110\1\u020c\1\110\1\u020c\1\110"+
    "\1\u020c\4\110\1\u020c\6\110\1\u020c\1\110\2\u020c\3\110"+
    "\1\u020c\7\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\35\117\1\u020d\7\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\10\117\1\u020e\34\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\3\117\1\u020f\41\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\34\117\1\u0210\10\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\5\117\1\u0211\37\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\32\117\1\u01ea\12\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\7\117"+
    "\1\u0212\35\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\32\117\1\u0213"+
    "\12\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\7\117\1\u0214\35\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\1\117\1\u01de\43\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\u0215\44\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\1\117\1\u0216\43\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\6\117\1\u0217\36\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\35\117"+
    "\1\u0218\7\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\15\117\1\u01e0"+
    "\27\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\12\117\1\u0219\32\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\32\117\1\u021a\12\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\7\117\1\u021b\35\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\12\117\1\u01e3\32\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\2\117\1\u021c\42\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\35\117\1\u021d\7\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\5\117"+
    "\1\u021e\37\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\1\117\1\357"+
    "\43\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\12\117\1\u021f\32\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\33\117\1\357\11\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\7\117\1\u0220\35\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\12\117\1\u0221\32\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\40\117\1\u017f\4\117\1\110\10\0\6\117\1\0"+
    "\5\117\1\u0222\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\45\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\1\117\1\u017f"+
    "\43\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\41\117\1\u0223\3\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\6\117\1\u018d\36\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\117\1\370\43\117\52\0\1\u01f1"+
    "\6\0\1\u019b\51\0\1\u0224\117\0\2\u0225\1\0\7\u01f2"+
    "\1\0\6\u01f2\1\0\1\u0225\1\0\1\u0225\1\u01f2\1\u0225"+
    "\4\u01f2\2\u0225\1\0\3\u0225\1\0\7\u0225\45\u01f2\13\0"+
    "\1\u0226\54\0\1\u0226\43\0\6\177\1\0\6\177\6\0"+
    "\4\177\16\0\2\177\1\u0227\42\177\10\0\1\u01a3\112\0"+
    "\2\52\1\0\1\52\1\0\2\52\2\0\1\76\5\52"+
    "\1\0\25\52\1\0\7\52\1\0\3\52\1\76\43\52"+
    "\1\0\1\52\1\0\2\52\2\0\6\52\1\0\25\52"+
    "\1\0\7\52\1\0\14\52\1\u0228\17\52\1\u0228\12\52"+
    "\1\0\1\52\1\0\2\52\2\0\6\52\1\0\25\52"+
    "\1\0\7\52\1\0\15\52\1\u0142\17\52\1\u0142\11\52"+
    "\1\0\1\52\1\0\2\52\2\0\6\52\1\0\17\52"+
    "\1\u0229\5\52\1\0\7\52\1\0\7\52\1\u0229\37\52"+
    "\1\0\1\52\1\0\2\52\2\0\5\52\1\u022a\1\0"+
    "\25\52\1\0\7\52\1\0\1\52\1\u022a\45\52\1\0"+
    "\1\52\1\0\2\52\2\0\2\52\1\u022b\3\52\1\0"+
    "\25\52\1\0\7\52\1\0\12\52\1\u022b\34\52\1\0"+
    "\1\52\1\0\2\52\2\0\6\52\1\0\25\52\1\0"+
    "\7\52\1\0\24\52\1\u022c\22\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\14\52\1\u01f9\17\52\1\u01f9\12\52\1\0\1\52\1\0"+
    "\2\52\2\0\1\u01bd\5\52\1\0\25\52\1\0\7\52"+
    "\1\0\3\52\1\u01bd\43\52\1\0\1\52\1\0\2\52"+
    "\2\0\1\u022d\5\52\1\0\25\52\1\0\7\52\1\0"+
    "\3\52\1\u022d\43\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\16\52\1\u0141"+
    "\20\52\1\u0141\7\52\1\0\1\52\1\0\2\52\2\0"+
    "\1\u01f7\5\52\1\0\25\52\1\0\7\52\1\0\3\52"+
    "\1\u01f7\43\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\25\52\1\0\7\52\1\0\17\52\1\u022e\22\52"+
    "\1\u022e\4\52\1\0\1\52\1\0\2\52\2\0\1\52"+
    "\1\u022f\4\52\1\0\25\52\1\0\7\52\1\0\11\52"+
    "\1\u022f\35\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\17\52\1\u0125\5\52\1\0\7\52\1\0\7\52"+
    "\1\u0125\37\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\15\52\1\u01f7\7\52\1\0\7\52\1\0\6\52"+
    "\1\u01f7\40\52\1\0\1\52\1\0\2\52\2\0\6\52"+
    "\1\0\17\52\1\u0230\5\52\1\0\7\52\1\0\7\52"+
    "\1\u0230\37\52\1\0\1\52\1\0\2\52\2\0\3\52"+
    "\1\277\2\52\1\0\25\52\1\0\7\52\1\0\5\52"+
    "\1\277\41\52\1\0\1\52\1\0\2\52\2\0\2\52"+
    "\1\u0231\3\52\1\0\25\52\1\0\7\52\1\0\12\52"+
    "\1\u0231\32\52\14\0\1\u0232\46\0\1\u0232\37\0\1\110"+
    "\10\0\1\110\1\u0233\4\110\1\0\1\110\4\u0233\1\110"+
    "\1\0\4\110\1\0\2\110\2\u0233\16\0\4\110\1\u0233"+
    "\2\110\1\u0233\1\110\1\u0233\1\110\1\u0233\4\110\1\u0233"+
    "\6\110\1\u0233\1\110\2\u0233\3\110\1\u0233\7\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\5\117\1\u0234\37\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\5\117\1\u0235\37\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\4\117\1\357\40\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\11\117"+
    "\1\357\33\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\11\117\1\u0236"+
    "\33\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\41\117\1\u017f\3\117"+
    "\1\110\10\0\3\117\1\u0237\2\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\2\117\1\u0238\1\117\16\0"+
    "\45\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\12\117\1\u0239\32\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\5\117\1\u023a\37\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\6\117\1\u023b\36\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\5\117\1\u023c\37\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\4\117\1\u023d\40\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\35\117\1\u023e\7\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\42\117"+
    "\1\u023f\2\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\7\117\1\u01e0"+
    "\35\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\36\117\1\u0165\6\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\35\117\1\u0240\7\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\35\117\1\357\7\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\32\117\1\u0241\12\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\32\117\1\u0242\12\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\6\117\1\u01e3\36\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\41\117"+
    "\1\u016f\3\117\10\0\1\u01f2\126\0\1\u0243\46\0\1\u0243"+
    "\50\0\6\177\1\0\6\177\6\0\4\177\16\0\1\177"+
    "\1\u0244\43\177\2\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\5\52\1\u0122\17\52\1\0\7\52\1\0"+
    "\21\52\1\u0122\25\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\14\52\1\76\10\52\1\0\7\52\1\0"+
    "\43\52\1\76\3\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\u0245\5\52\1\0\7\52\1\0"+
    "\7\52\1\u0245\37\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\u014a\5\52\1\0\7\52\1\0"+
    "\7\52\1\u014a\37\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\5\52\1\u0246\17\52\1\0\7\52\1\0"+
    "\21\52\1\u0246\25\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\14\52\1\220"+
    "\17\52\1\220\12\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\17\52\1\u01f7\5\52\1\0\7\52\1\0"+
    "\7\52\1\u01f7\37\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\14\52\1\u0145"+
    "\17\52\1\u0145\12\52\1\0\1\52\1\0\2\52\2\0"+
    "\6\52\1\0\25\52\1\0\7\52\1\0\17\52\1\u0247"+
    "\22\52\1\u0247\4\52\1\0\1\52\1\0\2\52\2\0"+
    "\3\52\1\311\2\52\1\0\25\52\1\0\7\52\1\0"+
    "\5\52\1\311\37\52\15\0\1\u0248\42\0\1\u0248\42\0"+
    "\1\110\10\0\1\110\1\117\4\110\1\0\1\110\4\117"+
    "\1\110\1\0\4\110\1\0\2\110\2\117\16\0\4\110"+
    "\1\117\2\110\1\117\1\110\1\117\1\110\1\117\4\110"+
    "\1\117\6\110\1\117\1\110\2\117\3\110\1\117\7\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\117\1\u023b\43\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\7\117\1\u0249\35\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\1\117\1\u024a\43\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\35\117\1\u024b\7\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\6\117"+
    "\1\u024c\36\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\34\117\1\u024d"+
    "\10\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\34\117\1\u021f\10\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\37\117\1\357\5\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\1\117\1\u021c\43\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\32\117\1\u024e\12\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\11\117\1\u0169\33\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\7\117\1\u024f\35\117\1\110\10\0\6\117\1\0\5\117"+
    "\1\u017f\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\45\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\35\117\1\u01de\7\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\11\117\1\u01e3\33\117\15\0"+
    "\1\u0250\42\0\1\u0250\42\0\2\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\14\52\1\u0142\10\52\1\0"+
    "\7\52\1\0\43\52\1\u0142\3\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\14\52\1\222\17\52\1\222\12\52\1\0\1\52\1\0"+
    "\2\52\2\0\4\52\1\u0251\1\52\1\0\25\52\1\0"+
    "\7\52\1\0\2\52\1\u0251\42\52\16\0\1\u0252\40\0"+
    "\1\u0252\43\0\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\35\117\1\u01e3"+
    "\7\117\1\110\10\0\6\117\1\0\6\117\1\0\1\110"+
    "\1\322\2\117\1\0\4\117\16\0\7\117\1\u0195\35\117"+
    "\1\110\10\0\6\117\1\0\6\117\1\0\1\110\1\322"+
    "\2\117\1\0\4\117\16\0\1\117\1\u01e0\43\117\1\110"+
    "\10\0\6\117\1\0\6\117\1\0\1\110\1\322\2\117"+
    "\1\0\4\117\16\0\34\117\1\u0253\10\117\1\110\10\0"+
    "\6\117\1\0\6\117\1\0\1\110\1\322\2\117\1\0"+
    "\4\117\16\0\35\117\1\u0254\7\117\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\11\117\1\u017f\33\117\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\35\117\1\u0255\7\117\16\0\1\u0256\40\0\1\u0256\43\0"+
    "\2\52\1\0\1\52\1\0\2\52\2\0\6\52\1\0"+
    "\15\52\1\u0257\7\52\1\0\7\52\1\0\6\52\1\u0257"+
    "\36\52\17\0\1\u0258\103\0\1\110\10\0\6\117\1\0"+
    "\6\117\1\0\1\110\1\322\2\117\1\0\4\117\16\0"+
    "\32\117\1\u024b\12\117\1\110\10\0\6\117\1\0\6\117"+
    "\1\0\1\110\1\322\2\117\1\0\4\117\16\0\5\117"+
    "\1\u0259\37\117\1\110\10\0\6\117\1\0\6\117\1\0"+
    "\1\110\1\322\2\117\1\0\4\117\16\0\1\117\1\u0165"+
    "\43\117\17\0\1\u025a\103\0\2\52\1\0\1\52\1\0"+
    "\2\52\2\0\6\52\1\0\25\52\1\0\7\52\1\0"+
    "\13\52\1\222\16\52\1\222\12\52\1\110\10\0\6\117"+
    "\1\0\6\117\1\0\1\110\1\322\2\117\1\0\4\117"+
    "\16\0\44\117\1\u024a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44986];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\1\1\0\2\1\5\0\2\1\1\11\4\1"+
    "\1\11\5\1\1\11\2\1\2\11\2\1\1\11\1\1"+
    "\3\11\1\1\1\11\25\1\1\11\1\1\1\11\1\1"+
    "\3\11\1\1\1\11\2\1\2\11\7\1\1\11\3\1"+
    "\1\11\1\1\1\11\22\1\2\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\5\1\1\11\4\1\1\11\1\1"+
    "\1\11\5\0\1\11\103\1\1\11\2\0\1\11\72\1"+
    "\1\11\2\1\1\11\5\0\1\1\1\0\1\1\1\11"+
    "\4\0\100\1\2\0\3\1\1\0\66\1\7\0\1\11"+
    "\1\1\2\0\44\1\1\0\1\11\45\1\1\0\1\11"+
    "\2\0\1\1\1\0\1\1\2\0\24\1\1\0\30\1"+
    "\3\0\13\1\1\0\20\1\1\0\4\1\1\0\7\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * double-quote attribute.
	 */
	public static final int INTERNAL_ATTR_DOUBLE			= -1;


	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * single-quote attribute.
	 */
	public static final int INTERNAL_ATTR_SINGLE			= -2;


	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed HTML tag; thus a new line is beginning
	 * still inside of the tag.
	 */
	public static final int INTERNAL_INTAG					= -3;

	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed <code>&lt;script&gt;</code> tag.
	 */
	public static final int INTERNAL_INTAG_SCRIPT			= -4;

	/**
	 * Token type specifying we're in a double-qouted attribute in a
	 * script tag.
	 */
	public static final int INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT = -5;

	/**
	 * Token type specifying we're in a single-qouted attribute in a
	 * script tag.
	 */
	public static final int INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT = -6;

	/**
	 * Token type specifying we're in JavaScript.
	 */
	public static final int INTERNAL_IN_JS					= -7;

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	public static final int INTERNAL_IN_JS_MLC				= -8;

	/**
	 * Token type specifying we're in an invalid multi-line JS string.
	 */
	public static final int INTERNAL_IN_JS_STRING_INVALID	= -9;

	/**
	 * Token type specifying we're in a valid multi-line JS string.
	 */
	public static final int INTERNAL_IN_JS_STRING_VALID		= -10;

	/**
	 * Token type specifying we're in an invalid multi-line JS single-quoted string.
	 */
	public static final int INTERNAL_IN_JS_CHAR_INVALID	= -11;

	/**
	 * Token type specifying we're in a valid multi-line JS single-quoted string.
	 */
	public static final int INTERNAL_IN_JS_CHAR_VALID		= -12;

	/**
	 * Whether closing markup tags are automatically completed for HTML.
	 */
	private static boolean completeCloseTags;

	/**
	 * When in the JS_STRING state, whether the current string is valid.
	 */
	private boolean validJSString;


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public HTMLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Sets whether markup close tags should be completed.  You might not want
	 * this to be the case, since some tags in standard HTML aren't usually
	 * closed.
	 *
	 * @return Whether closing markup tags are completed.
	 * @see #setCompleteCloseTags(boolean)
	 */
	public boolean getCompleteCloseTags() {
		return completeCloseTags;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = COMMENT;
				start = text.offset;
				break;
			case Token.PREPROCESSOR:
				state = PI;
				start = text.offset;
				break;
			case Token.VARIABLE:
				state = DTD;
				start = text.offset;
				break;
			case INTERNAL_INTAG:
				state = INTAG;
				start = text.offset;
				break;
			case INTERNAL_INTAG_SCRIPT:
				state = INTAG_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_ATTR_DOUBLE:
				state = INATTR_DOUBLE;
				start = text.offset;
				break;
			case INTERNAL_ATTR_SINGLE:
				state = INATTR_SINGLE;
				start = text.offset;
				break;
			case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:
				state = INATTR_DOUBLE_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:
				state = INATTR_SINGLE_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS:
				state = JAVASCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_STRING_INVALID:
				state = JS_STRING;
				validJSString = false;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_STRING_VALID:
				state = JS_STRING;
				validJSString = true;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_CHAR_INVALID:
				state = JS_CHAR;
				validJSString = false;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_CHAR_VALID:
				state = JS_CHAR;
				validJSString = true;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Sets whether markup close tags should be completed.  You might not want
	 * this to be the case, since some tags in standard HTML aren't usually
	 * closed.
	 *
	 * @param complete Whether closing markup tags are completed.
	 * @see #getCompleteCloseTags()
	 */
	public static void setCompleteCloseTags(boolean complete) {
		completeCloseTags = complete;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 65: break;
        case 59: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 66: break;
        case 50: 
          { /* Skip all escaped chars. */
          }
        case 67: break;
        case 52: 
          { /* Invalid latin-1 character \xXX */ validJSString = false;
          }
        case 68: break;
        case 46: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 69: break;
        case 38: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 70: break;
        case 64: 
          { yybegin(YYINITIAL);
							  int temp = zzStartRead;
							  addToken(start,zzStartRead-1, Token.COMMENT_EOL);
							  addToken(temp,temp+1, Token.MARKUP_TAG_DELIMITER);
							  addToken(zzMarkedPos-7,zzMarkedPos-2, Token.MARKUP_TAG_NAME);
							  addToken(zzMarkedPos-1,zzMarkedPos-1, Token.MARKUP_TAG_DELIMITER);
          }
        case 71: break;
        case 39: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
									zzMarkedPos -= (count-1); //yypushback(count-1);
									yybegin(INTAG_CHECK_TAG_NAME);
          }
        case 72: break;
        case 23: 
          { start = zzMarkedPos-1; yybegin(INATTR_SINGLE_SCRIPT);
          }
        case 73: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 74: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
          }
        case 75: break;
        case 37: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 76: break;
        case 60: 
          { addToken(Token.FUNCTION);
          }
        case 77: break;
        case 40: 
          { start = zzMarkedPos-2; yybegin(DTD);
          }
        case 78: break;
        case 26: 
          { addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 79: break;
        case 63: 
          { yybegin(YYINITIAL);
								  addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
								  addToken(zzMarkedPos-7,zzMarkedPos-2, Token.MARKUP_TAG_NAME);
								  addToken(zzMarkedPos-1,zzMarkedPos-1, Token.MARKUP_TAG_DELIMITER);
          }
        case 80: break;
        case 24: 
          { yybegin(INTAG_SCRIPT); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 81: break;
        case 34: 
          { addToken(start,zzStartRead-1, Token.ERROR_CHAR); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 82: break;
        case 18: 
          { /* Shouldn't happen */ yypushback(1); yybegin(INTAG);
          }
        case 83: break;
        case 25: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 84: break;
        case 32: 
          { int type = validJSString ? Token.LITERAL_STRING_DOUBLE_QUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(JAVASCRIPT);
          }
        case 85: break;
        case 45: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 86: break;
        case 4: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(INTAG);
          }
        case 87: break;
        case 31: 
          { addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 88: break;
        case 10: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.VARIABLE);
          }
        case 89: break;
        case 53: 
          { yybegin(JAVASCRIPT); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 90: break;
        case 36: 
          { int type = validJSString ? Token.LITERAL_CHAR : Token.ERROR_CHAR; addToken(start,zzStartRead, type); yybegin(JAVASCRIPT);
          }
        case 91: break;
        case 42: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.PREPROCESSOR);
          }
        case 92: break;
        case 20: 
          { yybegin(INTAG); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 93: break;
        case 44: 
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 94: break;
        case 41: 
          { start = zzMarkedPos-2; yybegin(PI);
          }
        case 95: break;
        case 12: 
          { start = zzMarkedPos-1; yybegin(INATTR_DOUBLE);
          }
        case 96: break;
        case 48: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 97: break;
        case 17: 
          { /* A non-recognized HTML tag name */ yypushback(yylength()); yybegin(INTAG);
          }
        case 98: break;
        case 21: 
          { start = zzMarkedPos-1; yybegin(INATTR_DOUBLE_SCRIPT);
          }
        case 99: break;
        case 33: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
									addEndToken(INTERNAL_IN_JS_STRING_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_STRING_INVALID);
								}
								return firstToken;
          }
        case 100: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 101: break;
        case 6: 
          { addToken(Token.DATA_TYPE);
          }
        case 102: break;
        case 19: 
          { addToken(Token.MARKUP_TAG_NAME);
          }
        case 103: break;
        case 35: 
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_INVALID);
								}
								return firstToken;
          }
        case 104: break;
        case 28: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 105: break;
        case 16: 
          { start = zzMarkedPos-1; yybegin(INATTR_SINGLE);
          }
        case 106: break;
        case 11: 
          { addToken(Token.MARKUP_TAG_ATTRIBUTE);
          }
        case 107: break;
        case 27: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_STRING);
          }
        case 108: break;
        case 51: 
          { /* Invalid Unicode character \\uXXXX */ validJSString = false;
          }
        case 109: break;
        case 56: 
          { start = zzMarkedPos-4; yybegin(COMMENT);
          }
        case 110: break;
        case 30: 
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_CHAR);
          }
        case 111: break;
        case 49: 
          { addToken(Token.RESERVED_WORD);
          }
        case 112: break;
        case 57: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 113: break;
        case 62: 
          { addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
							  addToken(zzMarkedPos-6,zzMarkedPos-1, Token.MARKUP_TAG_NAME);
							  start = zzMarkedPos; yybegin(INTAG_SCRIPT);
          }
        case 114: break;
        case 55: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2, Token.COMMENT_MULTILINE);
          }
        case 115: break;
        case 54: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
									zzMarkedPos -= (count-2); //yypushback(count-2);
									yybegin(INTAG_CHECK_TAG_NAME);
          }
        case 116: break;
        case 29: 
          { addToken(Token.SEPARATOR);
          }
        case 117: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 118: break;
        case 22: 
          { yybegin(JAVASCRIPT); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 119: break;
        case 43: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(YYINITIAL);
          }
        case 120: break;
        case 7: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 121: break;
        case 15: 
          { addToken(Token.OPERATOR);
          }
        case 122: break;
        case 47: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 123: break;
        case 13: 
          { addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 124: break;
        case 61: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 125: break;
        case 58: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 126: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
          }
        case 127: break;
        case 1: 
          { 
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case JS_STRING: {
              addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 603: break;
            case INTAG_CHECK_TAG_NAME: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 604: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 605: break;
            case INTAG_SCRIPT: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG_SCRIPT); return firstToken;
            }
            case 606: break;
            case JS_CHAR: {
              addToken(start,zzStartRead-1, Token.ERROR_CHAR); addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 607: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 608: break;
            case INATTR_DOUBLE_SCRIPT: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT); return firstToken;
            }
            case 609: break;
            case INATTR_SINGLE_SCRIPT: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT); return firstToken;
            }
            case 610: break;
            case DTD: {
              addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
            }
            case 611: break;
            case INATTR_SINGLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_SINGLE); return firstToken;
            }
            case 612: break;
            case INATTR_DOUBLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_DOUBLE); return firstToken;
            }
            case 613: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 614: break;
            case INTAG: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 615: break;
            case COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 616: break;
            case JAVASCRIPT: {
              addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 617: break;
            case PI: {
              addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
            }
            case 618: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
