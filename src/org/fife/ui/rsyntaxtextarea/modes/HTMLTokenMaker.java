/* The following code was generated by JFlex 1.4.1 on 1/22/12 4:54 PM */

/*
 * 01/24/2005
 *
 * HTMLTokenMaker.java - Generates tokens for HTML syntax highlighting.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for HTML 5 files.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated HTMLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.8
 *
 */

public class HTMLTokenMaker extends AbstractMarkupTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int INTAG_CHECK_TAG_NAME = 5;
  public static final int JS_MLC = 12;
  public static final int INTAG_SCRIPT = 8;
  public static final int JS_EOL_COMMENT = 13;
  public static final int INATTR_DOUBLE_SCRIPT = 9;
  public static final int INATTR_SINGLE_SCRIPT = 10;
  public static final int DTD = 3;
  public static final int INATTR_SINGLE = 7;
  public static final int INATTR_DOUBLE = 6;
  public static final int YYINITIAL = 0;
  public static final int INTAG = 4;
  public static final int COMMENT = 1;
  public static final int JAVASCRIPT = 11;
  public static final int PI = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\1\1\36\22\0\1\4\1\57\1\27"+
    "\1\37\1\41\1\56\1\5\1\26\2\63\1\42\1\54\1\53\1\50"+
    "\1\51\1\10\1\22\3\35\3\35\1\24\2\21\1\61\1\6\1\3"+
    "\1\7\1\17\1\60\1\37\1\74\1\23\1\12\1\101\1\47\1\45"+
    "\1\103\1\107\1\14\1\110\1\104\1\44\1\100\1\76\1\75\1\15"+
    "\1\105\1\13\1\11\1\16\1\102\1\106\1\20\1\43\1\77\1\20"+
    "\1\63\1\25\1\63\1\55\1\40\1\0\1\111\1\34\1\73\1\114"+
    "\1\71\1\46\1\117\1\64\1\67\1\110\1\112\1\70\1\120\1\33"+
    "\1\113\1\65\1\105\1\31\1\66\1\32\1\30\1\116\1\72\1\121"+
    "\1\115\1\122\1\52\1\55\1\52\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\0\2\1\3\0\2\2\1\3\1\4"+
    "\1\5\1\6\1\1\1\7\5\1\1\10\2\1\1\11"+
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\21\2\23\1\21\2\23\5\21\1\23"+
    "\4\21\1\23\1\21\1\1\1\24\1\1\1\15\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\14\1\2\2\14"+
    "\2\2\1\14\2\33\1\34\1\35\5\2\1\31\1\2"+
    "\1\14\1\2\1\36\1\14\14\2\1\1\1\37\5\1"+
    "\1\40\1\1\1\4\1\41\1\42\1\43\1\41\1\6"+
    "\5\0\1\44\31\21\1\23\12\21\1\23\5\21\1\23"+
    "\30\21\1\45\2\0\1\46\1\47\1\31\1\2\1\14"+
    "\1\50\1\33\1\51\1\50\1\51\1\50\1\52\1\50"+
    "\1\34\1\53\1\54\1\35\1\55\30\2\2\56\21\2"+
    "\1\56\2\2\1\57\5\0\1\60\1\0\1\41\2\0"+
    "\1\61\2\0\14\21\1\23\63\21\2\0\1\31\1\2"+
    "\1\51\1\0\2\52\1\0\1\53\1\34\1\53\3\35"+
    "\32\2\1\6\31\2\5\0\1\62\1\41\2\0\1\63"+
    "\17\21\1\23\10\21\1\23\12\21\1\0\1\64\1\31"+
    "\1\2\1\0\1\53\1\34\1\54\1\53\1\35\1\65"+
    "\1\55\1\35\1\2\1\66\6\2\1\6\20\2\1\67"+
    "\11\2\2\0\1\70\1\0\1\41\2\0\11\21\1\23"+
    "\12\21\1\0\1\31\1\2\1\0\1\53\1\35\2\2"+
    "\1\56\3\2\1\56\17\2\3\0\1\41\12\21\1\0"+
    "\1\31\1\2\1\0\1\53\1\35\16\2\1\0\1\71"+
    "\3\21\2\0\7\2\1\0\1\21\1\0\3\2\1\0"+
    "\1\21\1\72\1\2\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[613];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u0530\0\u06cf\0\u0722"+
    "\0\u0775\0\u07c8\0\u081b\0\u0530\0\u086e\0\u08c1\0\u0530\0\u0530"+
    "\0\u0914\0\u0967\0\u0530\0\u09ba\0\u0530\0\u0530\0\u0530\0\u0a0d"+
    "\0\u0530\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52"+
    "\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea"+
    "\0\u0f3d\0\u0f90\0\u0fe3\0\u0a0d\0\u1036\0\u1089\0\u0530\0\u10dc"+
    "\0\u112f\0\u0530\0\u0530\0\u0530\0\u0530\0\u1182\0\u0530\0\u11d5"+
    "\0\u1228\0\u0530\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a"+
    "\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f\0\u16b2"+
    "\0\u0530\0\u1705\0\u1758\0\u17ab\0\u0530\0\u17fe\0\u1851\0\u18a4"+
    "\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c"+
    "\0\u1b8f\0\u1be2\0\u1c35\0\u0530\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81"+
    "\0\u1dd4\0\u0530\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u0530\0\u1f73"+
    "\0\u0530\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u2112\0\u0530\0\u2165"+
    "\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304\0\u2357\0\u23aa\0\u23fd"+
    "\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695"+
    "\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d"+
    "\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5"+
    "\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d"+
    "\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5"+
    "\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d"+
    "\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625"+
    "\0\u3678\0\u36cb\0\u0530\0\u127b\0\u371e\0\u0530\0\u3771\0\u37c4"+
    "\0\u3817\0\u386a\0\u38bd\0\u38bd\0\u38bd\0\u3910\0\u3963\0\u39b6"+
    "\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u0530\0\u3b55\0\u0530\0\u3ba8"+
    "\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40"+
    "\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8"+
    "\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370"+
    "\0\u1321\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f\0\u4562\0\u45b5"+
    "\0\u4608\0\u465b\0\u46ae\0\u4701\0\u4754\0\u47a7\0\u47fa\0\u484d"+
    "\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u0530\0\u4a3f\0\u4a92"+
    "\0\u4ae5\0\u4b38\0\u4b8b\0\u1e7a\0\u4bde\0\u4c31\0\u4c84\0\u4cd7"+
    "\0\u0530\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u4ec9\0\u4f1c"+
    "\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb\0\u510e\0\u5161\0\u51b4"+
    "\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6\0\u53f9\0\u544c"+
    "\0\u549f\0\u54f2\0\u5545\0\u5598\0\u2d11\0\u55eb\0\u563e\0\u5691"+
    "\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u5929"+
    "\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8\0\u5b1b\0\u5b6e\0\u0ca5"+
    "\0\u5bc1\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60\0\u5db3\0\u5e06"+
    "\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8\0\u604b\0\u609e"+
    "\0\u60f1\0\u6144\0\u6197\0\u61ea\0\u623d\0\u6290\0\u62e3\0\u6336"+
    "\0\u6389\0\u38bd\0\u63dc\0\u642f\0\u6482\0\u64d5\0\u6528\0\u657b"+
    "\0\u65ce\0\u6621\0\u6674\0\u66c7\0\u671a\0\u676d\0\u67c0\0\u6813"+
    "\0\u6866\0\u68b9\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58\0\u6aab"+
    "\0\u6afe\0\u6b51\0\u6ba4\0\u6bf7\0\u6c4a\0\u6c9d\0\u6cf0\0\u6d43"+
    "\0\u6d96\0\u6de9\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35\0\u6f88\0\u6fdb"+
    "\0\u702e\0\u7081\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220\0\u7273"+
    "\0\u72c6\0\u7319\0\u736c\0\u73bf\0\u7412\0\u7465\0\u74b8\0\u750b"+
    "\0\u755e\0\u75b1\0\u7604\0\u7657\0\u76aa\0\u76fd\0\u7750\0\u77a3"+
    "\0\u77f6\0\u7849\0\u789c\0\u0530\0\u78ef\0\u7942\0\u7995\0\u79e8"+
    "\0\u7a3b\0\u7a8e\0\u7ae1\0\u7b34\0\u7b87\0\u7bda\0\u7c2d\0\u7c80"+
    "\0\u7cd3\0\u7d26\0\u7d79\0\u7dcc\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18"+
    "\0\u7f6b\0\u7fbe\0\u2f03\0\u8011\0\u8064\0\u80b7\0\u810a\0\u815d"+
    "\0\u597c\0\u81b0\0\u8203\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2"+
    "\0\u83f5\0\u8448\0\u849b\0\u84ee\0\u0530\0\u8541\0\u8594\0\u85e7"+
    "\0\u863a\0\u0530\0\u6482\0\u868d\0\u86e0\0\u0530\0\u657b\0\u8733"+
    "\0\u8786\0\u1321\0\u87d9\0\u882c\0\u887f\0\u88d2\0\u8925\0\u8978"+
    "\0\u1321\0\u89cb\0\u8a1e\0\u8a71\0\u8ac4\0\u8b17\0\u8b6a\0\u8bbd"+
    "\0\u8c10\0\u8c63\0\u8cb6\0\u8d09\0\u8d5c\0\u8daf\0\u8e02\0\u8e55"+
    "\0\u8ea8\0\u1321\0\u8efb\0\u8f4e\0\u8fa1\0\u8ff4\0\u9047\0\u909a"+
    "\0\u90ed\0\u9140\0\u9193\0\u91e6\0\u9239\0\u928c\0\u92df\0\u9332"+
    "\0\u9385\0\u79e8\0\u93d8\0\u942b\0\u947e\0\u94d1\0\u9524\0\u9577"+
    "\0\u95ca\0\u961d\0\u9670\0\u96c3\0\u96c3\0\u9716\0\u9769\0\u97bc"+
    "\0\u980f\0\u9862\0\u98b5\0\u9908\0\u995b\0\u99ae\0\u9a01\0\u9a54"+
    "\0\u9aa7\0\u9afa\0\u9b4d\0\u9ba0\0\u9bf3\0\u9c46\0\u6813\0\u9c99"+
    "\0\u9cec\0\u9d3f\0\u9d92\0\u9de5\0\u9e38\0\u9e8b\0\u9ede\0\u9f31"+
    "\0\u9f84\0\u9fd7\0\ua02a\0\ua07d\0\ua0d0\0\ua123\0\ua176\0\ua1c9"+
    "\0\ua21c\0\ua26f\0\ua2c2\0\u928c\0\ua315\0\ua368\0\ua3bb\0\ua40e"+
    "\0\ua461\0\ua4b4\0\ua507\0\ua55a\0\ua5ad\0\ua600\0\ua653\0\ua6a6"+
    "\0\ua6f9\0\ua74c\0\ua79f\0\ua7f2\0\ua845\0\ua898\0\ua8eb\0\ua93e"+
    "\0\ua991\0\ua9e4\0\uaa37\0\uaa8a\0\uaadd\0\uab30\0\uab83\0\uabd6"+
    "\0\uac29\0\uac7c\0\uaccf\0\uad22\0\uad75\0\u1ecd\0\uadc8\0\uae1b"+
    "\0\uae6e\0\uaec1\0\uaf14\0\uaf67\0\uafba\0\ub00d\0\ub060\0\ub0b3"+
    "\0\ub106\0\ub159\0\ub1ac\0\ub1ff\0\ub252\0\ub2a5\0\ub2f8\0\ub34b"+
    "\0\ub39e\0\ub3f1\0\u0530\0\ub444\0\u0530";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[613];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\22\1\23\1\24\115\17\2\25"+
    "\1\26\43\25\1\27\1\25\1\30\13\25\1\31\5\25"+
    "\1\32\30\25\2\33\1\34\55\33\1\35\42\33\2\36"+
    "\1\37\14\36\1\40\103\36\1\41\1\42\1\0\1\41"+
    "\1\23\2\41\1\43\1\44\6\41\1\45\6\41\1\46"+
    "\1\47\73\41\2\50\1\0\1\50\1\51\2\50\2\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\51\3\50"+
    "\1\60\2\50\2\51\1\61\1\54\1\57\1\62\1\60"+
    "\7\50\1\63\2\64\1\65\14\50\1\66\1\56\1\52"+
    "\1\55\1\63\1\65\1\50\1\53\1\67\1\70\1\62"+
    "\1\50\1\71\1\72\1\61\1\50\1\73\1\74\1\75"+
    "\1\66\1\50\1\67\1\73\1\70\1\72\1\50\1\75"+
    "\1\50\1\71\2\50\27\76\1\77\73\76\26\100\1\77"+
    "\74\100\1\41\1\42\1\0\1\41\1\23\2\41\1\43"+
    "\1\101\6\41\1\102\6\41\1\103\1\104\73\41\27\76"+
    "\1\105\73\76\26\100\1\105\74\100\1\106\1\23\1\107"+
    "\1\110\1\23\1\111\1\112\1\113\1\114\3\115\1\116"+
    "\2\115\1\117\1\115\1\120\1\121\1\115\1\120\1\106"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\120"+
    "\1\131\1\106\2\115\1\113\3\115\1\132\1\115\1\133"+
    "\1\134\1\135\1\112\1\136\3\113\3\43\1\135\1\115"+
    "\1\137\1\140\1\141\1\142\1\143\1\144\1\145\2\115"+
    "\1\146\12\115\1\147\2\115\1\150\1\115\1\151\1\152"+
    "\3\115\2\153\1\154\37\153\1\155\3\153\1\156\15\153"+
    "\1\157\5\153\1\160\30\153\2\161\1\162\1\163\42\161"+
    "\1\156\15\161\1\157\5\161\1\160\30\161\2\17\4\0"+
    "\116\17\1\20\2\0\1\23\1\0\115\17\133\0\1\164"+
    "\6\165\1\0\5\165\3\0\6\165\5\0\5\165\7\0"+
    "\1\166\1\167\3\0\2\165\1\170\34\165\1\0\1\23"+
    "\2\0\1\23\116\0\4\24\1\0\1\24\1\171\114\24"+
    "\2\25\1\0\43\25\1\0\1\25\1\0\13\25\1\0"+
    "\5\25\1\0\30\25\32\0\1\172\34\0\1\173\103\0"+
    "\1\174\104\0\1\175\162\0\1\176\30\0\2\33\1\0"+
    "\55\33\1\0\42\33\17\0\1\177\103\0\2\36\1\0"+
    "\14\36\1\0\103\36\2\41\1\0\1\41\1\0\2\41"+
    "\2\0\6\41\1\0\6\41\2\0\74\41\1\42\1\0"+
    "\1\41\1\23\2\41\2\0\6\41\1\0\6\41\2\0"+
    "\73\41\17\0\1\45\103\0\2\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\75\50\1\0"+
    "\1\50\1\0\2\50\2\0\1\50\1\200\2\50\1\201"+
    "\1\202\1\0\6\50\2\0\1\203\1\50\1\202\14\50"+
    "\1\204\15\50\1\201\3\50\1\204\1\50\1\200\1\205"+
    "\1\206\2\50\1\207\1\50\1\203\6\50\1\205\1\50"+
    "\1\206\4\50\1\207\4\50\1\0\1\50\1\0\2\50"+
    "\2\0\3\50\1\210\2\50\1\0\6\50\2\0\17\50"+
    "\1\211\17\50\1\210\1\50\1\211\2\50\1\212\1\213"+
    "\13\50\1\212\1\50\1\213\11\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\1\214\51\50"+
    "\1\214\22\50\1\0\1\50\1\0\2\50\2\0\1\215"+
    "\5\50\1\0\6\50\2\0\3\50\1\216\10\50\1\217"+
    "\2\220\17\50\1\215\1\50\1\217\5\50\1\216\1\50"+
    "\1\221\17\50\1\221\4\50\1\0\1\50\1\0\2\50"+
    "\2\0\2\50\1\222\3\50\1\0\6\50\2\0\1\50"+
    "\1\222\12\50\1\223\23\50\1\223\3\50\1\224\14\50"+
    "\1\224\13\50\1\0\1\50\1\0\2\50\2\0\2\50"+
    "\1\74\1\225\1\50\1\74\1\0\3\50\1\226\2\50"+
    "\2\0\1\50\2\74\1\50\1\226\10\50\2\227\1\230"+
    "\14\50\1\231\2\50\1\225\1\50\1\230\2\50\1\232"+
    "\4\50\1\74\5\50\1\231\1\50\1\232\2\50\1\74"+
    "\10\50\1\0\1\50\1\0\2\50\2\0\2\50\1\74"+
    "\1\221\2\50\1\0\6\50\2\0\1\233\1\74\12\50"+
    "\1\234\22\50\1\221\1\234\3\50\1\235\1\236\3\50"+
    "\1\237\1\233\1\240\5\50\1\235\1\50\1\236\1\237"+
    "\2\50\1\240\5\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\14\50\1\74\23\50\1\74"+
    "\34\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\17\50\1\241\21\50\1\241\2\50\1\242"+
    "\1\243\13\50\1\242\1\50\1\243\11\50\1\0\1\50"+
    "\1\0\2\50\2\0\3\50\1\244\2\50\1\0\6\50"+
    "\2\0\17\50\1\245\17\50\1\244\1\50\1\245\2\50"+
    "\1\246\14\50\1\246\13\50\1\0\1\50\1\0\2\50"+
    "\2\0\2\50\1\247\1\250\2\50\1\0\6\50\2\0"+
    "\1\50\1\247\35\50\1\250\5\50\1\251\15\50\1\251"+
    "\11\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\50\50\1\252\5\50\1\253\7\50\1\253"+
    "\1\50\1\252\4\50\1\0\1\50\1\0\2\50\2\0"+
    "\2\50\1\74\2\50\1\254\1\0\6\50\2\0\1\50"+
    "\1\74\1\254\2\50\1\74\11\50\1\255\21\50\1\255"+
    "\33\50\1\0\1\50\1\0\2\50\2\0\1\256\1\257"+
    "\1\260\1\50\1\261\1\50\1\0\3\50\1\262\2\50"+
    "\2\0\1\263\1\260\2\50\1\262\30\50\1\261\1\256"+
    "\4\50\1\257\5\50\1\264\1\263\11\50\1\264\10\50"+
    "\1\0\1\50\1\0\2\50\2\0\4\50\1\265\1\50"+
    "\1\0\3\50\1\266\2\50\2\0\1\267\3\50\1\266"+
    "\7\50\1\74\20\50\1\265\2\50\1\74\11\50\1\267"+
    "\22\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\1\270\16\50\1\271\21\50\1\271\2\50"+
    "\1\272\5\50\1\270\6\50\1\272\13\50\1\0\1\50"+
    "\1\0\2\50\2\0\3\50\1\273\1\50\1\74\1\0"+
    "\6\50\2\0\2\50\1\74\11\50\1\74\2\274\1\275"+
    "\17\50\1\273\1\74\1\275\2\50\1\276\4\50\1\74"+
    "\7\50\1\276\2\50\1\74\10\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\3\50\1\277\2\50\2\0"+
    "\4\50\1\277\12\50\1\300\21\50\1\300\33\50\1\0"+
    "\1\50\1\0\2\50\2\0\3\50\1\301\2\50\1\0"+
    "\6\50\2\0\37\50\1\301\4\50\1\302\14\50\1\302"+
    "\11\50\27\76\1\0\73\76\26\100\1\0\74\100\17\0"+
    "\1\303\103\0\1\106\10\0\6\106\1\0\6\106\2\0"+
    "\6\106\1\0\3\106\1\0\5\106\14\0\37\106\3\0"+
    "\1\304\3\0\1\43\1\305\117\0\1\43\1\0\1\43"+
    "\122\0\1\43\122\0\1\43\1\306\31\0\1\307\60\0"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\3\115\1\311"+
    "\2\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\7\0\1\43\7\0\1\312\103\0\1\313\10\0\6\313"+
    "\1\0\1\313\2\120\1\313\1\120\1\313\2\0\5\313"+
    "\1\120\1\0\3\313\1\0\1\313\1\314\2\315\1\316"+
    "\1\0\1\317\12\0\4\313\1\314\1\316\7\313\1\315"+
    "\12\313\1\315\7\313\10\0\6\313\1\0\1\313\1\320"+
    "\1\321\1\313\1\321\1\313\2\0\5\313\1\321\1\0"+
    "\3\313\1\0\1\322\1\314\2\315\1\316\1\0\1\317"+
    "\12\0\4\313\1\314\1\316\7\313\1\315\12\313\1\315"+
    "\4\313\1\322\1\313\2\122\1\323\22\122\1\324\1\325"+
    "\74\122\2\123\1\0\22\123\1\326\1\123\1\327\73\123"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\3\115"+
    "\1\330\2\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\5\115"+
    "\1\331\31\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\1\115\1\332\4\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\1\333\30\115\1\334\5\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\1\335\5\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\5\115\1\336\17\115"+
    "\1\337\11\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\1\115\1\340\4\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\27\115\1\341\1\115\1\342\5\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\1\343\5\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\3\115\1\344"+
    "\1\345\20\115\1\346\1\115\1\347\7\115\7\0\1\43"+
    "\40\0\1\43\73\0\2\317\1\0\1\317\10\0\1\317"+
    "\74\0\1\43\44\0\1\43\46\0\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\1\350\1\351\4\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\25\115\1\352\11\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\1\353"+
    "\1\115\1\354\3\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\1\355\5\115\1\356\22\115\1\357\5\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\3\115\1\360"+
    "\2\115\1\0\1\106\2\115\1\0\3\115\1\361\1\115"+
    "\14\0\2\115\1\362\31\115\1\363\2\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\27\115\1\364\7\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\3\115\1\365"+
    "\2\115\1\0\1\106\2\115\1\0\5\115\14\0\2\115"+
    "\1\366\1\115\1\367\25\115\1\370\2\115\1\371\1\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\1\372\2\115"+
    "\1\373\33\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\1\374\3\115\1\375\20\115\1\376\1\115\1\377\7\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\25\115\1\u0100"+
    "\11\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\4\115\1\u0101\1\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\37\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\5\115\1\u0102\21\115\1\u0103\7\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\25\115\1\347\1\115\1\u0104\7\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\27\115\1\u0105"+
    "\7\115\2\153\1\0\37\153\1\0\3\153\1\0\15\153"+
    "\1\0\5\153\1\0\30\153\10\0\1\u0106\144\0\1\u0107"+
    "\34\0\1\u0108\65\0\1\u0109\162\0\1\u010a\30\0\2\161"+
    "\2\0\42\161\1\0\15\161\1\0\5\161\1\0\30\161"+
    "\10\0\1\u010b\123\0\6\u010c\1\0\5\u010c\3\0\6\u010c"+
    "\5\0\5\u010c\14\0\37\u010c\11\0\6\165\1\0\5\165"+
    "\3\0\6\165\5\0\5\165\14\0\37\165\50\0\1\u010d"+
    "\63\0\6\165\1\0\5\165\3\0\6\165\5\0\5\165"+
    "\14\0\7\165\1\u010e\27\165\65\0\1\u010f\125\0\1\u0110"+
    "\51\0\1\u0111\135\0\1\u0112\162\0\1\u0113\30\0\2\50"+
    "\1\0\1\50\1\0\2\50\2\0\2\50\1\u0114\3\50"+
    "\1\0\6\50\2\0\1\50\1\u0114\73\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\44\50"+
    "\1\u0115\14\50\1\u0115\13\50\1\0\1\50\1\0\2\50"+
    "\2\0\2\50\1\u0116\3\50\1\0\6\50\2\0\1\50"+
    "\1\u0116\45\50\1\214\15\50\1\214\7\50\1\0\1\50"+
    "\1\0\2\50\2\0\4\50\1\74\1\50\1\0\3\50"+
    "\1\74\2\50\2\0\4\50\1\74\30\50\1\74\37\50"+
    "\1\0\1\50\1\0\2\50\2\0\1\50\1\u0117\1\u0118"+
    "\3\50\1\0\6\50\2\0\1\50\1\u0118\12\50\1\u0119"+
    "\23\50\1\u0119\2\50\1\u0117\31\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\50\50\1\u011a"+
    "\17\50\1\u011a\4\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\1\u011b\51\50\1\u011b\22\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\44\50\1\u011c\14\50\1\u011c\13\50\1\0\1\50"+
    "\1\0\2\50\2\0\5\50\1\u011d\1\0\6\50\2\0"+
    "\2\50\1\u011d\72\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\3\50\1\u011e\42\50\1\u011e"+
    "\26\50\1\0\1\50\1\0\2\50\2\0\4\50\1\u0117"+
    "\1\50\1\0\6\50\2\0\3\50\1\u011f\31\50\1\u0117"+
    "\10\50\1\u011f\26\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\14\50\1\u0120\23\50\1\u0120"+
    "\7\50\1\u0121\1\u011d\12\50\1\u011d\3\50\1\u0121\4\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\14\50\1\u011d\23\50\1\u011d\34\50\1\0\1\50"+
    "\1\0\2\50\2\0\3\50\1\u0122\2\50\1\0\6\50"+
    "\2\0\37\50\1\u0122\35\50\1\0\1\50\1\0\2\50"+
    "\2\0\1\74\3\50\1\u0123\1\50\1\0\6\50\2\0"+
    "\35\50\1\u0123\1\74\36\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\44\50\1\u0124\14\50"+
    "\1\u0124\13\50\1\0\1\50\1\0\2\50\2\0\2\50"+
    "\1\u0125\3\50\1\0\6\50\2\0\1\50\1\u0125\73\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\53\50\1\74\13\50\1\74\5\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\17\50"+
    "\1\74\21\50\1\74\3\50\1\u0126\15\50\1\u0126\11\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\44\50\1\u0127\14\50\1\u0127\13\50\1\0\1\50"+
    "\1\0\2\50\2\0\2\50\1\u0128\3\50\1\0\6\50"+
    "\2\0\1\50\1\u0128\73\50\1\0\1\50\1\0\2\50"+
    "\2\0\5\50\1\214\1\0\6\50\2\0\2\50\1\214"+
    "\45\50\1\u011d\17\50\1\u011d\4\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\45\50\1\236"+
    "\15\50\1\236\11\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\45\50\1\u0129\15\50\1\u0129"+
    "\11\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\13\50\1\u012a\55\50\1\u012a\3\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\17\50\1\u012b\21\50\1\u012b\33\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\3\50\1\214\2\50\2\0"+
    "\4\50\1\214\70\50\1\0\1\50\1\0\2\50\2\0"+
    "\5\50\1\u012c\1\0\6\50\2\0\2\50\1\u012c\72\50"+
    "\1\0\1\50\1\0\2\50\2\0\3\50\1\u012d\2\50"+
    "\1\0\6\50\2\0\37\50\1\u012d\5\50\1\u012e\15\50"+
    "\1\u012e\11\50\1\0\1\50\1\0\2\50\2\0\1\u012f"+
    "\5\50\1\0\6\50\2\0\36\50\1\u012f\36\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\51\50\1\u0130\12\50\1\u0130\10\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\45\50\1\74"+
    "\15\50\1\74\11\50\1\0\1\50\1\0\2\50\2\0"+
    "\1\u0131\5\50\1\0\6\50\2\0\36\50\1\u0131\36\50"+
    "\1\0\1\50\1\0\2\50\2\0\1\u0132\5\50\1\0"+
    "\6\50\2\0\36\50\1\u0132\36\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\56\50\1\74"+
    "\7\50\1\74\6\50\1\0\1\50\1\0\2\50\2\0"+
    "\1\u0133\5\50\1\0\3\50\1\302\2\50\2\0\4\50"+
    "\1\302\7\50\1\217\2\u0134\1\u0135\16\50\1\u0133\1\50"+
    "\1\217\1\u0135\33\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\3\50\1\u0136\42\50\1\u0136"+
    "\26\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\53\50\1\u0137\13\50\1\u0137\5\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\3\50\1\u0138"+
    "\2\50\2\0\4\50\1\u0138\42\50\1\u0139\15\50\1\u0139"+
    "\7\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\44\50\1\u013a\14\50\1\u013a\13\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\17\50\1\u013b\21\50\1\u013b\11\50\1\u013c\13\50\1\u013c"+
    "\5\50\1\0\1\50\1\0\2\50\2\0\2\50\1\u013d"+
    "\3\50\1\0\6\50\2\0\1\50\1\u013d\1\50\1\u0132"+
    "\41\50\1\u011e\1\u0132\14\50\1\u011e\11\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\3\50\1\u013e\2\50"+
    "\2\0\4\50\1\u013e\70\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\17\50\1\u013f\21\50"+
    "\1\u013f\33\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\50\50\1\u0140\17\50\1\u0140\4\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\44\50\1\u0141\14\50\1\u0141\13\50\1\0\1\50"+
    "\1\0\2\50\2\0\3\50\1\u0142\2\50\1\0\6\50"+
    "\2\0\37\50\1\u0142\35\50\1\0\1\50\1\0\2\50"+
    "\2\0\2\50\1\u0143\3\50\1\0\6\50\2\0\1\50"+
    "\1\u0143\73\50\1\0\1\50\1\0\2\50\2\0\5\50"+
    "\1\u0144\1\0\6\50\2\0\2\50\1\u0144\14\50\1\u0145"+
    "\21\50\1\u0145\33\50\1\0\1\50\1\0\2\50\2\0"+
    "\4\50\1\u0146\1\50\1\0\6\50\2\0\35\50\1\u0146"+
    "\37\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\3\50\1\302\2\50\2\0\4\50\1\302\70\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\51\50\1\u0147\12\50\1\u0147\10\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\51\50\1\u0148"+
    "\12\50\1\u0148\10\50\1\0\1\50\1\0\2\50\2\0"+
    "\5\50\1\u0149\1\0\6\50\2\0\2\50\1\u0149\72\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\60\50\1\u0119\14\50\1\0\1\50\1\0\2\50"+
    "\2\0\5\50\1\u014a\1\0\6\50\2\0\2\50\1\u014a"+
    "\72\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\14\50\1\u014b\23\50\1\u014b\34\50\1\0"+
    "\1\50\1\0\2\50\2\0\5\50\1\u014c\1\0\6\50"+
    "\2\0\2\50\1\u014c\1\u014d\42\50\1\u014d\26\50\1\0"+
    "\1\50\1\0\2\50\2\0\2\50\1\u014e\1\50\1\74"+
    "\1\50\1\0\6\50\2\0\1\50\1\u014e\33\50\1\74"+
    "\37\50\1\0\1\50\1\0\2\50\2\0\2\50\1\74"+
    "\3\50\1\0\6\50\2\0\1\50\1\74\42\50\1\u014f"+
    "\11\50\1\74\2\50\1\u014f\4\50\1\74\6\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\3\50\1\74\42\50\1\74\26\50\1\0\1\50\1\0"+
    "\2\50\2\0\5\50\1\u0150\1\0\6\50\2\0\2\50"+
    "\1\u0150\11\50\1\74\23\50\1\74\34\50\1\0\1\50"+
    "\1\0\2\50\2\0\5\50\1\u0151\1\0\6\50\2\0"+
    "\2\50\1\u0151\72\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\51\50\1\74\12\50\1\74"+
    "\10\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\47\50\1\u0152\15\50\1\u0152\7\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\51\50\1\u0153\12\50\1\u0153\10\50\1\0\1\50\1\0"+
    "\2\50\2\0\2\50\1\74\3\50\1\0\6\50\2\0"+
    "\1\50\1\74\71\50\11\0\1\u0154\54\0\1\u0154\76\0"+
    "\1\u0155\60\0\1\106\10\0\6\106\1\0\6\106\2\0"+
    "\1\u0156\5\106\1\0\3\106\1\0\5\106\14\0\40\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\3\115\1\u0157\1\115\14\0\37\115"+
    "\7\0\1\43\7\0\1\113\103\0\1\313\10\0\6\313"+
    "\1\0\6\313\2\0\6\313\1\0\3\313\1\0\5\313"+
    "\14\0\40\313\10\0\6\313\1\0\1\313\2\u0158\1\313"+
    "\1\u0158\1\313\2\0\5\313\1\u0158\1\0\3\313\1\0"+
    "\5\313\1\u0159\3\0\1\u0159\7\0\40\313\10\0\6\313"+
    "\1\0\1\313\2\317\1\313\1\317\1\313\2\0\5\313"+
    "\1\317\1\0\3\313\1\0\2\313\2\315\1\316\14\0"+
    "\5\313\1\316\7\313\1\315\12\313\1\315\7\313\10\0"+
    "\6\313\1\0\1\313\2\320\1\313\1\320\1\313\2\0"+
    "\5\313\1\320\1\0\3\313\1\0\2\313\2\315\1\316"+
    "\1\0\1\317\12\0\5\313\1\316\7\313\1\315\12\313"+
    "\1\315\7\313\10\0\6\313\1\0\1\313\1\320\1\321"+
    "\1\313\1\321\1\313\2\0\5\313\1\321\1\0\3\313"+
    "\1\0\1\313\1\u015a\2\315\1\316\1\0\1\317\12\0"+
    "\4\313\1\u015a\1\316\7\313\1\315\12\313\1\315\7\313"+
    "\10\0\1\313\1\u015b\4\313\1\0\1\313\4\u015b\1\313"+
    "\2\0\4\313\2\u015b\1\0\3\313\1\0\2\313\3\u015b"+
    "\14\0\5\313\1\u015b\1\313\2\u015b\4\313\1\u015b\7\313"+
    "\1\u015b\2\313\1\u015b\6\313\25\323\1\u015c\1\325\74\323"+
    "\2\u015d\1\0\17\u015d\1\122\1\u015d\1\122\1\u015e\2\122"+
    "\1\u015f\5\122\10\u015d\1\122\54\u015d\2\u0160\1\0\17\u0160"+
    "\1\123\1\u0160\1\123\1\u0161\2\123\1\u0162\5\123\10\u0160"+
    "\1\123\54\u0160\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\5\115\1\u0163\31\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\2\115\1\u0164\3\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\37\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\1\u0165\5\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\25\115\1\u0166\3\115\1\361\5\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\1\115"+
    "\1\u0167\4\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\3\115\1\u0168\33\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\1\115\1\u0169\35\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\4\115\1\u016a\32\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\6\115\1\361\30\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\2\115\1\u016b\3\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\5\115\1\u016c\31\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\27\115\1\u016d"+
    "\7\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\2\115\1\u016e\3\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\37\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\3\115\1\u016f\2\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\3\115\1\u0170\2\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\37\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\27\115\1\u0171\7\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\4\115\1\u0172\32\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\1\115\1\361\4\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\4\115\1\u0173"+
    "\1\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\3\115\1\u0174"+
    "\23\115\1\u0175\7\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\1\115\1\u0176\4\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\7\115\1\u0177\27\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\1\115\1\u0178\35\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\25\115\1\u0179\11\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\27\115\1\u017a"+
    "\7\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\3\115"+
    "\1\u017b\33\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\3\115\1\u017c\2\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\2\115\1\u017d\3\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\2\115\1\u017e\34\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\2\115\1\u017f\2\115\14\0\12\115\1\u0180"+
    "\24\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\1\115"+
    "\1\u0181\35\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\3\115\1\u0182\2\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\1\u0183\5\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\7\115\1\u0184\27\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\2\115\1\u0185\34\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\25\115\1\u0186\11\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\2\115\1\u0187\3\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\1\115\1\u0188"+
    "\35\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\3\115"+
    "\1\u0189\33\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\2\115\1\u018a\3\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\25\115\1\u018b\11\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\25\115\1\u018c\11\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\2\115\1\u018d\3\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\2\115\1\u0185\34\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\3\115"+
    "\1\u018e\2\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\12\115"+
    "\1\361\24\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\2\115\1\u018f\34\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\4\115\1\u0190\1\115\1\0\1\106\2\115"+
    "\1\0\3\115\1\u0191\1\115\14\0\4\115\1\u0192\32\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\1\u0193"+
    "\5\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\3\115\1\u0194"+
    "\1\u0195\32\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\2\115\1\u0196\3\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\65\0\1\u0197\125\0\1\u0198\64\0"+
    "\1\u0199\162\0\1\u019a\41\0\1\u019b\54\0\1\u019b\104\0"+
    "\1\u019c\63\0\6\165\1\0\5\165\3\0\1\165\1\u019d"+
    "\4\165\5\0\5\165\14\0\37\165\61\0\1\u019e\132\0"+
    "\1\u010f\116\0\1\u019f\106\0\1\u01a0\51\0\2\50\1\0"+
    "\1\50\1\0\2\50\2\0\3\50\1\u01a1\2\50\1\0"+
    "\6\50\2\0\37\50\1\u01a1\35\50\1\0\1\50\1\0"+
    "\2\50\2\0\1\50\1\u0139\4\50\1\0\6\50\2\0"+
    "\3\50\1\74\37\50\1\u0139\2\50\1\74\26\50\1\0"+
    "\1\50\1\0\2\50\2\0\3\50\1\u01a2\2\50\1\0"+
    "\6\50\2\0\37\50\1\u01a2\5\50\1\u01a3\15\50\1\u01a3"+
    "\11\50\1\0\1\50\1\0\2\50\2\0\5\50\1\u01a4"+
    "\1\0\6\50\2\0\2\50\1\u01a4\72\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\56\50"+
    "\1\u0139\7\50\1\u0139\6\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\17\50\1\u01a5\21\50"+
    "\1\u01a5\33\50\1\0\1\50\1\0\2\50\2\0\4\50"+
    "\1\74\1\50\1\0\6\50\2\0\35\50\1\74\37\50"+
    "\1\0\1\50\1\0\2\50\2\0\2\50\1\u01a6\3\50"+
    "\1\0\6\50\2\0\1\50\1\u01a6\73\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\14\50"+
    "\1\u0140\23\50\1\u0140\34\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\17\50\1\74\21\50"+
    "\1\74\33\50\1\0\1\50\1\0\2\50\2\0\5\50"+
    "\1\u0139\1\0\6\50\2\0\2\50\1\u0139\72\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\56\50\1\u01a7\7\50\1\u01a7\6\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\53\50\1\u01a8"+
    "\13\50\1\u01a8\5\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\50\50\1\u01a9\17\50\1\u01a9"+
    "\4\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\3\50\1\u01aa\42\50\1\u01aa\26\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\1\u0132\51\50\1\u0132\22\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\47\50\1\u0139\15\50"+
    "\1\u0139\7\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\44\50\1\u01ab\14\50\1\u01ab\13\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\53\50\1\u0148\13\50\1\u0148\5\50\1\0\1\50"+
    "\1\0\2\50\2\0\3\50\1\u01ac\2\50\1\0\6\50"+
    "\2\0\37\50\1\u01ac\35\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\44\50\1\u013d\14\50"+
    "\1\u013d\13\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\45\50\1\u0132\15\50\1\u0132\11\50"+
    "\1\0\1\50\1\0\2\50\2\0\5\50\1\u01ad\1\0"+
    "\6\50\2\0\2\50\1\u01ad\72\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\44\50\1\277"+
    "\14\50\1\277\13\50\1\0\1\50\1\0\2\50\2\0"+
    "\5\50\1\u01ae\1\0\6\50\2\0\2\50\1\u01ae\72\50"+
    "\1\0\1\50\1\0\2\50\2\0\1\50\1\u01af\4\50"+
    "\1\0\6\50\2\0\43\50\1\u01af\31\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\17\50"+
    "\1\u01b0\21\50\1\u01b0\33\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\47\50\1\74\15\50"+
    "\1\74\7\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\45\50\1\u01b1\15\50\1\u01b1\11\50"+
    "\1\0\1\50\1\0\2\50\2\0\5\50\1\74\1\0"+
    "\6\50\2\0\2\50\1\74\72\50\1\0\1\50\1\0"+
    "\2\50\2\0\1\50\1\200\4\50\1\0\6\50\2\0"+
    "\43\50\1\200\31\50\1\0\1\50\1\0\2\50\2\0"+
    "\2\50\1\u01b2\3\50\1\0\6\50\2\0\1\50\1\u01b2"+
    "\73\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\50\50\1\u01b3\17\50\1\u01b3\4\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\54\50\1\74\5\50\1\74\12\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\17\50\1\u01b4"+
    "\21\50\1\u01b4\33\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\17\50\1\u0140\21\50\1\u0140"+
    "\33\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\17\50\1\302\21\50\1\302\33\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\50\50\1\u01b5\17\50\1\u01b5\4\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\14\50\1\u01b6"+
    "\23\50\1\u01b6\34\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\1\u01b7\51\50\1\u01b7\22\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\50\50\1\74\17\50\1\74\4\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\17\50"+
    "\1\277\21\50\1\277\33\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\3\50\1\u01b8\42\50"+
    "\1\u01b8\26\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\51\50\1\u01b9\12\50\1\u01b9\10\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\51\50\1\u011d\12\50\1\u011d\10\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\45\50"+
    "\1\u01ba\15\50\1\u01ba\11\50\1\0\1\50\1\0\2\50"+
    "\2\0\3\50\1\u01bb\2\50\1\0\6\50\2\0\37\50"+
    "\1\u01bb\35\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\44\50\1\74\14\50\1\74\13\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\14\50\1\u01bc\23\50\1\u01bc\34\50\1\0\1\50"+
    "\1\0\2\50\2\0\3\50\1\237\2\50\1\0\6\50"+
    "\2\0\37\50\1\237\35\50\1\0\1\50\1\0\2\50"+
    "\2\0\2\50\1\u01bd\3\50\1\0\6\50\2\0\1\50"+
    "\1\u01bd\73\50\1\0\1\50\1\0\2\50\2\0\3\50"+
    "\1\u01ae\2\50\1\0\6\50\2\0\37\50\1\u01ae\13\50"+
    "\1\u01a8\13\50\1\u01a8\5\50\1\0\1\50\1\0\2\50"+
    "\2\0\4\50\1\u0123\1\50\1\0\6\50\2\0\35\50"+
    "\1\u0123\37\50\1\0\1\50\1\0\2\50\2\0\5\50"+
    "\1\u01be\1\0\6\50\2\0\2\50\1\u01be\72\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\17\50\1\302\21\50\1\302\2\50\1\74\14\50\1\74"+
    "\13\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\1\74\51\50\1\74\22\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\54\50"+
    "\1\74\1\u01bf\4\50\1\74\12\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\14\50\1\u01c0"+
    "\23\50\1\u01c0\34\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\44\50\1\u01c1\14\50\1\u01c1"+
    "\13\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\44\50\1\u01c2\14\50\1\u01c2\13\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\53\50\1\u01c3\13\50\1\u01c3\5\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\17\50\1\237"+
    "\21\50\1\237\31\50\12\0\1\u01c4\60\0\1\u01c4\37\0"+
    "\1\u01c5\112\0\1\106\10\0\1\106\1\u01c6\4\106\1\0"+
    "\1\106\4\u01c6\1\106\2\0\4\106\2\u01c6\1\0\3\106"+
    "\1\0\2\106\3\u01c6\14\0\5\106\1\u01c6\1\106\2\u01c6"+
    "\4\106\1\u01c6\7\106\1\u01c6\2\106\1\u01c6\7\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\3\115\1\u01c7\33\115\1\313"+
    "\10\0\6\313\1\0\1\313\2\u0158\1\313\1\u0158\1\313"+
    "\2\0\5\313\1\u0158\1\0\3\313\1\0\2\313\2\315"+
    "\1\313\14\0\15\313\1\315\12\313\1\315\6\313\21\0"+
    "\2\u0158\1\0\1\u0158\10\0\1\u0158\65\0\1\313\10\0"+
    "\1\313\1\u015b\4\313\1\0\1\313\4\u015b\1\313\2\0"+
    "\4\313\2\u015b\1\0\3\313\1\0\1\313\1\u015a\3\u015b"+
    "\14\0\4\313\1\u015a\1\u015b\1\313\2\u015b\4\313\1\u015b"+
    "\7\313\1\u015b\2\313\1\u015b\6\313\22\0\1\323\1\0"+
    "\4\323\1\u01c8\5\323\10\0\1\323\54\0\2\u015d\1\0"+
    "\22\u015d\1\u01c9\1\u01ca\74\u015d\2\122\1\323\22\122\1\324"+
    "\1\u01cb\74\122\2\u015d\1\0\7\u015d\1\u01cc\6\u015d\4\u01cc"+
    "\1\u01c9\1\u01ca\5\u015d\2\u01cc\7\u015d\3\u01cc\21\u015d\1\u01cc"+
    "\1\u015d\2\u01cc\4\u015d\1\u01cc\7\u015d\1\u01cc\2\u015d\1\u01cc"+
    "\6\u015d\2\u0160\1\0\22\u0160\1\u01cd\1\u0160\1\u01ce\73\u0160"+
    "\2\123\1\0\22\123\1\326\1\123\1\u01cf\73\123\2\u0160"+
    "\1\0\7\u0160\1\u01d0\6\u0160\4\u01d0\1\u01cd\1\u0160\1\u01ce"+
    "\4\u0160\2\u01d0\7\u0160\3\u01d0\21\u0160\1\u01d0\1\u0160\2\u01d0"+
    "\4\u0160\1\u01d0\7\u0160\1\u01d0\2\u0160\1\u01d0\6\u0160\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\2\115\1\366\34\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\1\u01d1"+
    "\5\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\5\115\1\u01d2"+
    "\31\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\3\115\1\u01d3\2\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\37\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\27\115\1\u01d4\7\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\2\115\1\361\34\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\5\115\1\u01d5\31\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\4\115\1\361\32\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\3\115\1\u01d6\33\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\25\115\1\u01d7\11\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\4\115\1\u01d8"+
    "\32\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\5\115"+
    "\1\u01d9\31\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\7\115\1\u01da\27\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\25\115\1\u01db\11\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\25\115\1\u01dc\11\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\2\115\1\u0165\34\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\4\115\1\u01dd\32\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\32\115\1\u01de\4\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\2\115"+
    "\1\u01df\3\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\2\115"+
    "\1\u01e0\34\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\26\115\1\u01e1\10\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\5\115\1\347\31\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\2\115\1\u01dd\3\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\37\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\1\115\1\u01dc\4\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\37\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\2\115\1\u018d\3\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\7\115\1\u01e2\27\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\5\115\1\u01e3"+
    "\31\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\2\115\1\u01e4\3\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\37\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\3\115\1\u01e5\33\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\25\115\1\u01e6\11\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\4\115\1\u01e7\22\115\1\u01e8\7\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\33\115\1\u01d9\3\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\34\115\1\361"+
    "\2\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\25\115"+
    "\1\u01e9\11\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\5\115\1\361\31\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\4\115\1\u01ea\32\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\5\115\1\u01eb\31\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\27\115\1\u01e8\7\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\4\115\1\u0185\32\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\1\361\36\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\1\115\1\u01d9"+
    "\4\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\2\115\1\u0168"+
    "\34\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\7\115"+
    "\1\u018a\27\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\2\115\1\u01ec\3\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\2\115\1\u01ed\34\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\2\115\1\u01ee\3\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\37\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\1\u01ef\5\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\37\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\25\115\1\u01f0\11\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\5\115\1\u01f1\31\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\4\115"+
    "\1\u01f2\1\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\30\115"+
    "\1\361\6\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\25\115\1\u01f3\11\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\27\115\1\361\7\115\61\0\1\u01f4\132\0\1\u0197"+
    "\116\0\1\u01f5\106\0\1\u01f6\63\0\1\u01f7\60\0\1\u01f7"+
    "\40\0\6\165\1\0\5\165\3\0\6\165\5\0\5\165"+
    "\14\0\3\165\1\u01f8\33\165\10\0\1\u01f9\173\0\1\u019e"+
    "\4\0\1\u010f\41\0\3\u01fa\7\u01a0\1\0\5\u01a0\1\0"+
    "\1\u01fa\1\0\6\u01a0\1\0\2\u01fa\1\u01a0\1\u01fa\5\u01a0"+
    "\2\u01fa\1\0\2\u01fa\1\0\6\u01fa\37\u01a0\2\50\1\0"+
    "\1\50\1\0\2\50\2\0\4\50\1\u0132\1\50\1\0"+
    "\6\50\2\0\35\50\1\u0132\37\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\54\50\1\u011d"+
    "\5\50\1\u011d\12\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\3\50\1\221\42\50\1\221"+
    "\26\50\1\0\1\50\1\0\2\50\2\0\3\50\1\u01ae"+
    "\2\50\1\0\6\50\2\0\37\50\1\u01ae\35\50\1\0"+
    "\1\50\1\0\2\50\2\0\1\50\1\u0132\4\50\1\0"+
    "\6\50\2\0\43\50\1\u0132\31\50\1\0\1\50\1\0"+
    "\2\50\2\0\1\50\1\u011d\4\50\1\0\6\50\2\0"+
    "\43\50\1\u011d\31\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\44\50\1\u01fb\14\50\1\u01fb"+
    "\13\50\1\0\1\50\1\0\2\50\2\0\2\50\1\u01fc"+
    "\3\50\1\0\6\50\2\0\1\50\1\u01fc\73\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\17\50\1\u01fd\21\50\1\u01fd\2\50\1\u01b4\14\50\1\u01b4"+
    "\13\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\51\50\1\u01fe\12\50\1\u01fe\10\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\50\50\1\u011d\17\50\1\u011d\4\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\3\50\1\u01ff"+
    "\42\50\1\u01ff\26\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\44\50\1\u0200\14\50\1\u0200"+
    "\13\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\45\50\1\274\15\50\1\274\11\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\54\50\1\u0201\5\50\1\u0201\12\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\15\50\2\u0202"+
    "\56\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\1\u01b4\51\50\1\u01b4\22\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\44\50"+
    "\1\u0203\14\50\1\u0203\13\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\3\50\1\277\42\50"+
    "\1\277\26\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\17\50\1\u0204\21\50\1\u0204\33\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\51\50\1\u0205\12\50\1\u0205\10\50\1\0\1\50"+
    "\1\0\2\50\2\0\2\50\1\u011d\3\50\1\0\6\50"+
    "\2\0\1\50\1\u011d\73\50\1\0\1\50\1\0\2\50"+
    "\2\0\5\50\1\u0206\1\0\6\50\2\0\2\50\1\u0206"+
    "\72\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\3\50\1\u0207\42\50\1\u0207\26\50\1\0"+
    "\1\50\1\0\2\50\2\0\1\50\1\214\4\50\1\0"+
    "\6\50\2\0\43\50\1\214\31\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\17\50\1\u0132"+
    "\21\50\1\u0132\33\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\17\50\1\u0208\21\50\1\u0208"+
    "\33\50\1\0\1\50\1\0\2\50\2\0\3\50\1\u0209"+
    "\2\50\1\0\6\50\2\0\37\50\1\u0209\35\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\1\u020a\51\50\1\u020a\22\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\45\50\1\221\15\50"+
    "\1\221\11\50\1\0\1\50\1\0\2\50\2\0\3\50"+
    "\1\u020b\2\50\1\0\6\50\2\0\37\50\1\u020b\35\50"+
    "\1\0\1\50\1\0\2\50\2\0\5\50\1\u020c\1\0"+
    "\6\50\2\0\2\50\1\u020c\11\50\1\u020d\23\50\1\u020d"+
    "\12\50\1\u020e\13\50\1\u020e\5\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\17\50\1\274"+
    "\21\50\1\274\31\50\13\0\1\u020f\15\0\1\u020f\71\0"+
    "\1\106\10\0\1\106\1\u0210\4\106\1\0\1\106\4\u0210"+
    "\1\106\2\0\4\106\2\u0210\1\0\3\106\1\0\2\106"+
    "\3\u0210\14\0\5\106\1\u0210\1\106\2\u0210\4\106\1\u0210"+
    "\7\106\1\u0210\2\106\1\u0210\7\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\3\115\1\u0211\2\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\37\115\12\0\1\u0212\6\0"+
    "\4\u0212\7\0\2\u0212\7\0\3\u0212\21\0\1\u0212\1\0"+
    "\2\u0212\4\0\1\u0212\7\0\1\u0212\2\0\1\u0212\6\0"+
    "\2\u015d\1\0\22\u015d\1\u01c9\77\u015d\1\0\7\u015d\1\u0213"+
    "\6\u015d\4\u0213\1\u01c9\1\u01ca\5\u015d\2\u0213\7\u015d\3\u0213"+
    "\21\u015d\1\u0213\1\u015d\2\u0213\4\u015d\1\u0213\7\u015d\1\u0213"+
    "\2\u015d\1\u0213\6\u015d\2\u0160\1\0\22\u0160\1\u01cd\77\u0160"+
    "\1\0\7\u0160\1\u0214\6\u0160\4\u0214\1\u01cd\1\u0160\1\u01ce"+
    "\4\u0160\2\u0214\7\u0160\3\u0214\21\u0160\1\u0214\1\u0160\2\u0214"+
    "\4\u0160\1\u0214\7\u0160\1\u0214\2\u0160\1\u0214\6\u0160\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\1\115\1\u0215"+
    "\4\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\2\115\1\u0216"+
    "\34\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\6\115"+
    "\1\u0217\30\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\27\115\1\u0218\7\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\32\115\1\u0185\4\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\26\115\1\361\10\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\5\115\1\u0219\31\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\2\115\1\u021a\3\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\4\115\1\u021b\32\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\2\115"+
    "\1\u01d9\3\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\3\115"+
    "\1\u021c\33\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\25\115\1\u01f1\11\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\5\115\1\u021d\31\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\5\115\1\u021e\31\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\25\115\1\u021f\11\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\1\u0220\36\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\1\115\1\u0221\4\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\25\115\1\u0222\11\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\3\115"+
    "\1\u0223\2\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\12\115"+
    "\1\u01ea\24\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\5\115\1\u0224\31\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\1\115\1\u01ed\4\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\37\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\1\115\1\u0225\35\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\3\115\1\u0226\2\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\37\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\3\115\1\u0227\33\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\2\115\1\361"+
    "\3\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\1\115"+
    "\1\u0228\4\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\33\115"+
    "\1\u0229\3\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\1\u022a\5\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\37\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\2\115\1\u0185\3\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\4\115\1\u016e\32\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\2\115\1\372\3\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\37\115\10\0\1\u022b\173\0"+
    "\1\u01f4\4\0\1\u0197\41\0\3\u022c\7\u01f6\1\0\5\u01f6"+
    "\1\0\1\u022c\1\0\6\u01f6\1\0\2\u022c\1\u01f6\1\u022c"+
    "\5\u01f6\2\u022c\1\0\2\u022c\1\0\6\u022c\37\u01f6\13\0"+
    "\1\u022d\15\0\1\u022d\102\0\6\165\1\0\5\165\3\0"+
    "\6\165\5\0\5\165\14\0\1\165\1\u022e\35\165\10\0"+
    "\1\u01a0\112\0\2\50\1\0\1\50\1\0\2\50\2\0"+
    "\1\74\5\50\1\0\6\50\2\0\36\50\1\74\36\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\45\50\1\u022f\15\50\1\u022f\11\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\3\50"+
    "\1\u0132\42\50\1\u0132\26\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\17\50\1\u0230\21\50"+
    "\1\u0230\33\50\1\0\1\50\1\0\2\50\2\0\5\50"+
    "\1\u0231\1\0\6\50\2\0\2\50\1\u0231\72\50\1\0"+
    "\1\50\1\0\2\50\2\0\2\50\1\u0232\3\50\1\0"+
    "\6\50\2\0\1\50\1\u0232\73\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\55\50\1\u0233"+
    "\17\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\45\50\1\u01fd\15\50\1\u01fd\11\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\50\50\1\u0234\17\50\1\u0234\4\50\1\0\1\50\1\0"+
    "\2\50\2\0\1\u01bc\5\50\1\0\6\50\2\0\36\50"+
    "\1\u01bc\36\50\1\0\1\50\1\0\2\50\2\0\1\u0235"+
    "\5\50\1\0\6\50\2\0\36\50\1\u0235\36\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\47\50\1\u013d\15\50\1\u013d\7\50\1\0\1\50\1\0"+
    "\2\50\2\0\1\u01fb\5\50\1\0\6\50\2\0\36\50"+
    "\1\u01fb\36\50\1\0\1\50\1\0\2\50\2\0\1\50"+
    "\1\u0236\4\50\1\0\6\50\2\0\43\50\1\u0236\31\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\17\50\1\u011d\21\50\1\u011d\33\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\14\50"+
    "\1\u01fb\23\50\1\u01fb\34\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\17\50\1\u0237\21\50"+
    "\1\u0237\33\50\1\0\1\50\1\0\2\50\2\0\3\50"+
    "\1\241\2\50\1\0\6\50\2\0\37\50\1\241\35\50"+
    "\1\0\1\50\1\0\2\50\2\0\2\50\1\u0238\3\50"+
    "\1\0\6\50\2\0\1\50\1\u0238\71\50\14\0\1\u0239"+
    "\52\0\1\u0239\33\0\1\106\10\0\1\106\1\u023a\4\106"+
    "\1\0\1\106\4\u023a\1\106\2\0\4\106\2\u023a\1\0"+
    "\3\106\1\0\2\106\3\u023a\14\0\5\106\1\u023a\1\106"+
    "\2\u023a\4\106\1\u023a\7\106\1\u023a\2\106\1\u023a\7\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\3\115\1\u023b\33\115"+
    "\12\0\1\u023c\6\0\4\u023c\7\0\2\u023c\7\0\3\u023c"+
    "\21\0\1\u023c\1\0\2\u023c\4\0\1\u023c\7\0\1\u023c"+
    "\2\0\1\u023c\6\0\2\u015d\1\0\7\u015d\1\u023d\6\u015d"+
    "\4\u023d\1\u01c9\1\u01ca\5\u015d\2\u023d\7\u015d\3\u023d\21\u015d"+
    "\1\u023d\1\u015d\2\u023d\4\u015d\1\u023d\7\u015d\1\u023d\2\u015d"+
    "\1\u023d\6\u015d\2\u0160\1\0\7\u0160\1\u023e\6\u0160\4\u023e"+
    "\1\u01cd\1\u0160\1\u01ce\4\u0160\2\u023e\7\u0160\3\u023e\21\u0160"+
    "\1\u023e\1\u0160\2\u023e\4\u0160\1\u023e\7\u0160\1\u023e\2\u0160"+
    "\1\u023e\6\u0160\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\3\115\1\361\2\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\3\115\1\u023f\33\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\3\115\1\361\1\115\14\0\37\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\25\115\1\u0240\11\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\3\115\1\u0241\33\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\4\115\1\u0242\32\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\7\115\1\361"+
    "\27\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\7\115"+
    "\1\u0243\27\115\1\106\10\0\3\115\1\u0244\2\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\2\115\1\u0245\2\115\14\0\37\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\33\115\1\u0185\3\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\1\115\1\u0246\4\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\3\115\1\u0247\1\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\3\115"+
    "\1\u0248\2\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\3\115"+
    "\1\u0249\33\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\34\115\1\u024a\2\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\5\115\1\u01ea\31\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\30\115\1\u0168\6\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\3\115\1\u024b\2\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\37\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\25\115\1\u024c\11\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\33\115\1\u0178\3\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\4\115\1\u01ed"+
    "\32\115\10\0\1\u01f6\126\0\1\u024d\52\0\1\u024d\44\0"+
    "\6\165\1\0\5\165\3\0\2\165\1\u024e\3\165\5\0"+
    "\5\165\14\0\37\165\2\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\1\u011a\51\50\1\u011a"+
    "\22\50\1\0\1\50\1\0\2\50\2\0\6\50\1\0"+
    "\6\50\2\0\13\50\1\74\55\50\1\74\3\50\1\0"+
    "\1\50\1\0\2\50\2\0\6\50\1\0\6\50\2\0"+
    "\17\50\1\u024f\21\50\1\u024f\33\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\17\50\1\u0145"+
    "\21\50\1\u0145\33\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\1\u0250\51\50\1\u0250\22\50"+
    "\1\0\1\50\1\0\2\50\2\0\6\50\1\0\6\50"+
    "\2\0\17\50\1\u01fb\21\50\1\u01fb\33\50\1\0\1\50"+
    "\1\0\2\50\2\0\6\50\1\0\6\50\2\0\45\50"+
    "\1\206\15\50\1\206\11\50\1\0\1\50\1\0\2\50"+
    "\2\0\6\50\1\0\6\50\2\0\45\50\1\u0140\15\50"+
    "\1\u0140\11\50\1\0\1\50\1\0\2\50\2\0\6\50"+
    "\1\0\6\50\2\0\50\50\1\u0251\17\50\1\u0251\4\50"+
    "\1\0\1\50\1\0\2\50\2\0\3\50\1\277\2\50"+
    "\1\0\6\50\2\0\37\50\1\277\33\50\15\0\1\u0252"+
    "\47\0\1\u0252\35\0\1\106\10\0\1\106\1\115\4\106"+
    "\1\0\1\106\4\115\1\106\2\0\4\106\2\115\1\0"+
    "\3\106\1\0\2\106\3\115\14\0\5\106\1\115\1\106"+
    "\2\115\4\106\1\115\7\106\1\115\2\106\1\115\7\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\2\115\1\u0242"+
    "\3\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\12\0\1\u0253\6\0\4\u0253\7\0\2\u0253\7\0\3\u0253"+
    "\21\0\1\u0253\1\0\2\u0253\4\0\1\u0253\7\0\1\u0253"+
    "\2\0\1\u0253\6\0\2\u015d\1\0\7\u015d\1\122\6\u015d"+
    "\4\122\1\u01c9\1\u01ca\5\u015d\2\122\7\u015d\3\122\21\u015d"+
    "\1\122\1\u015d\2\122\4\u015d\1\122\7\u015d\1\122\2\u015d"+
    "\1\122\6\u015d\2\u0160\1\0\7\u0160\1\123\6\u0160\4\123"+
    "\1\u01cd\1\u0160\1\u01ce\4\u0160\2\123\7\u0160\3\123\21\u0160"+
    "\1\123\1\u0160\2\123\4\u0160\1\123\7\u0160\1\123\2\u0160"+
    "\1\123\6\u0160\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\5\115\1\u0254\31\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\3\115\1\u01d9\2\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\37\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\27\115\1\u0215\7\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\31\115\1\361\5\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\2\115\1\u0255\3\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\3\115\1\u0256"+
    "\2\115\1\0\1\106\2\115\1\0\5\115\14\0\37\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\6\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\4\115\1\u0257"+
    "\32\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\27\115"+
    "\1\u0258\7\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\6\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\25\115\1\u0259\11\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\7\115\1\u0169\27\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\2\115\1\u0225\3\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\37\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\5\115\1\u025a\31\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\1\u0185\5\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\37\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\6\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\7\115\1\u01ed\27\115\15\0"+
    "\1\u025b\47\0\1\u025b\35\0\2\50\1\0\1\50\1\0"+
    "\2\50\2\0\6\50\1\0\6\50\2\0\13\50\1\u0132"+
    "\55\50\1\u0132\3\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\45\50\1\210\15\50\1\210"+
    "\11\50\1\0\1\50\1\0\2\50\2\0\4\50\1\u025c"+
    "\1\50\1\0\6\50\2\0\35\50\1\u025c\35\50\16\0"+
    "\1\u025d\13\0\1\u025d\102\0\1\323\6\0\4\323\7\0"+
    "\2\323\7\0\3\323\21\0\1\323\1\0\2\323\4\0"+
    "\1\323\7\0\1\323\2\0\1\323\6\0\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\3\115\1\u01ed\2\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\1\106"+
    "\10\0\6\115\1\0\5\115\1\310\2\0\6\115\1\0"+
    "\1\106\2\115\1\0\5\115\14\0\5\115\1\u0194\31\115"+
    "\1\106\10\0\6\115\1\0\5\115\1\310\2\0\2\115"+
    "\1\u01ea\3\115\1\0\1\106\2\115\1\0\5\115\14\0"+
    "\37\115\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\27\115"+
    "\1\u025e\7\115\1\106\10\0\6\115\1\0\5\115\1\310"+
    "\2\0\3\115\1\u025f\2\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\37\115\1\106\10\0\6\115\1\0\5\115"+
    "\1\310\2\0\6\115\1\0\1\106\2\115\1\0\5\115"+
    "\14\0\7\115\1\u0185\27\115\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\3\115\1\u0260\2\115\1\0\1\106"+
    "\2\115\1\0\5\115\14\0\37\115\16\0\1\u0261\13\0"+
    "\1\u0261\70\0\2\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\14\50\1\u0262\23\50\1\u0262"+
    "\32\50\17\0\1\u0263\103\0\1\106\10\0\6\115\1\0"+
    "\5\115\1\310\2\0\6\115\1\0\1\106\2\115\1\0"+
    "\5\115\14\0\25\115\1\u0256\11\115\1\106\10\0\6\115"+
    "\1\0\5\115\1\310\2\0\6\115\1\0\1\106\2\115"+
    "\1\0\5\115\14\0\3\115\1\u0264\33\115\1\106\10\0"+
    "\6\115\1\0\5\115\1\310\2\0\2\115\1\u0168\3\115"+
    "\1\0\1\106\2\115\1\0\5\115\14\0\37\115\17\0"+
    "\1\u0265\103\0\2\50\1\0\1\50\1\0\2\50\2\0"+
    "\6\50\1\0\6\50\2\0\44\50\1\210\14\50\1\210"+
    "\11\50\1\106\10\0\6\115\1\0\5\115\1\310\2\0"+
    "\6\115\1\0\1\106\2\115\1\0\5\115\14\0\36\115"+
    "\1\u0255";

  private static int [] zzUnpackTrans() {
    int [] result = new int[46231];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\1\1\0\2\1\3\0\2\1\1\11\4\1"+
    "\1\11\5\1\1\11\2\1\2\11\2\1\1\11\1\1"+
    "\3\11\1\1\1\11\25\1\1\11\2\1\4\11\1\1"+
    "\1\11\2\1\1\11\16\1\1\11\3\1\1\11\16\1"+
    "\1\11\5\1\1\11\4\1\1\11\1\1\1\11\5\0"+
    "\1\11\103\1\1\11\2\0\1\11\16\1\1\11\1\1"+
    "\1\11\56\1\1\11\5\0\1\1\1\0\1\1\2\0"+
    "\1\11\2\0\100\1\2\0\3\1\1\0\2\1\1\0"+
    "\72\1\5\0\1\11\1\1\2\0\44\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\11\3\1\1\11\45\1\2\0"+
    "\1\1\1\0\1\1\2\0\24\1\1\0\2\1\1\0"+
    "\30\1\3\0\13\1\1\0\2\1\1\0\20\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[613];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * double-quote attribute.
	 */
	public static final int INTERNAL_ATTR_DOUBLE			= -1;


	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * single-quote attribute.
	 */
	public static final int INTERNAL_ATTR_SINGLE			= -2;


	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed HTML tag; thus a new line is beginning
	 * still inside of the tag.
	 */
	public static final int INTERNAL_INTAG					= -3;

	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed <code>&lt;script&gt;</code> tag.
	 */
	public static final int INTERNAL_INTAG_SCRIPT			= -4;

	/**
	 * Token type specifying we're in a double-qouted attribute in a
	 * script tag.
	 */
	public static final int INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT = -5;

	/**
	 * Token type specifying we're in a single-qouted attribute in a
	 * script tag.
	 */
	public static final int INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT = -6;

	/**
	 * Token type specifying we're in JavaScript.
	 */
	public static final int INTERNAL_IN_JS					= -7;

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	public static final int INTERNAL_IN_JS_MLC				= -8;

	/**
	 * Whether closing markup tags are automatically completed for HTML.
	 */
	private static boolean completeCloseTags;


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public HTMLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Sets whether markup close tags should be completed.  You might not want
	 * this to be the case, since some tags in standard HTML aren't usually
	 * closed.
	 *
	 * @return Whether closing markup tags are completed.
	 * @see #setCompleteCloseTags(boolean)
	 */
	public boolean getCompleteCloseTags() {
		return completeCloseTags;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = COMMENT;
				start = text.offset;
				break;
			case Token.PREPROCESSOR:
				state = PI;
				start = text.offset;
				break;
			case Token.VARIABLE:
				state = DTD;
				start = text.offset;
				break;
			case INTERNAL_INTAG:
				state = INTAG;
				start = text.offset;
				break;
			case INTERNAL_INTAG_SCRIPT:
				state = INTAG_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_ATTR_DOUBLE:
				state = INATTR_DOUBLE;
				start = text.offset;
				break;
			case INTERNAL_ATTR_SINGLE:
				state = INATTR_SINGLE;
				start = text.offset;
				break;
			case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:
				state = INATTR_DOUBLE_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:
				state = INATTR_SINGLE_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS:
				state = JAVASCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Sets whether markup close tags should be completed.  You might not want
	 * this to be the case, since some tags in standard HTML aren't usually
	 * closed.
	 *
	 * @param complete Whether closing markup tags are completed.
	 * @see #getCompleteCloseTags()
	 */
	public static void setCompleteCloseTags(boolean complete) {
		completeCloseTags = complete;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 60: break;
        case 54: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 61: break;
        case 28: 
          { addToken(Token.ERROR_CHAR);
          }
        case 62: break;
        case 40: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 63: break;
        case 32: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 64: break;
        case 59: 
          { yybegin(YYINITIAL);
							  int temp = zzStartRead;
							  addToken(start,zzStartRead-1, Token.COMMENT_EOL);
							  addToken(temp,temp+1, Token.MARKUP_TAG_DELIMITER);
							  addToken(zzMarkedPos-7,zzMarkedPos-2, Token.MARKUP_TAG_NAME);
							  addToken(zzMarkedPos-1,zzMarkedPos-1, Token.MARKUP_TAG_DELIMITER);
          }
        case 65: break;
        case 22: 
          { start = zzMarkedPos-1; yybegin(INATTR_SINGLE_SCRIPT);
          }
        case 66: break;
        case 33: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
									zzMarkedPos -= (count-1); //yypushback(count-1);
									yybegin(INTAG_CHECK_TAG_NAME);
          }
        case 67: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 68: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
          }
        case 69: break;
        case 45: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 70: break;
        case 31: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 71: break;
        case 55: 
          { addToken(Token.FUNCTION);
          }
        case 72: break;
        case 26: 
          { addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 73: break;
        case 34: 
          { start = zzMarkedPos-2; yybegin(DTD);
          }
        case 74: break;
        case 58: 
          { yybegin(YYINITIAL);
								  addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
								  addToken(zzMarkedPos-7,zzMarkedPos-2, Token.MARKUP_TAG_NAME);
								  addToken(zzMarkedPos-1,zzMarkedPos-1, Token.MARKUP_TAG_DELIMITER);
          }
        case 75: break;
        case 24: 
          { yybegin(INTAG_SCRIPT); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 76: break;
        case 43: 
          { addToken(Token.ERROR_CHAR); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 77: break;
        case 18: 
          { /* Shouldn't happen */ yypushback(1); yybegin(INTAG);
          }
        case 78: break;
        case 25: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 79: break;
        case 39: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 80: break;
        case 4: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(INTAG);
          }
        case 81: break;
        case 10: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.VARIABLE);
          }
        case 82: break;
        case 47: 
          { yybegin(JAVASCRIPT); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 83: break;
        case 36: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.PREPROCESSOR);
          }
        case 84: break;
        case 20: 
          { yybegin(INTAG); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 85: break;
        case 38: 
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 86: break;
        case 44: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 87: break;
        case 35: 
          { start = zzMarkedPos-2; yybegin(PI);
          }
        case 88: break;
        case 16: 
          { start = zzMarkedPos-1; yybegin(INATTR_DOUBLE);
          }
        case 89: break;
        case 42: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 90: break;
        case 17: 
          { /* A non-recognized HTML tag name */ yypushback(yylength()); yybegin(INTAG);
          }
        case 91: break;
        case 23: 
          { start = zzMarkedPos-1; yybegin(INATTR_DOUBLE_SCRIPT);
          }
        case 92: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 93: break;
        case 6: 
          { addToken(Token.DATA_TYPE);
          }
        case 94: break;
        case 19: 
          { addToken(Token.MARKUP_TAG_NAME);
          }
        case 95: break;
        case 27: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 96: break;
        case 15: 
          { start = zzMarkedPos-1; yybegin(INATTR_SINGLE);
          }
        case 97: break;
        case 11: 
          { addToken(Token.MARKUP_TAG_ATTRIBUTE);
          }
        case 98: break;
        case 50: 
          { start = zzMarkedPos-4; yybegin(COMMENT);
          }
        case 99: break;
        case 46: 
          { addToken(Token.RESERVED_WORD);
          }
        case 100: break;
        case 51: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 101: break;
        case 57: 
          { addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
							  addToken(zzMarkedPos-6,zzMarkedPos-1, Token.MARKUP_TAG_NAME);
							  start = zzMarkedPos; yybegin(INTAG_SCRIPT);
          }
        case 102: break;
        case 49: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2, Token.COMMENT_MULTILINE);
          }
        case 103: break;
        case 48: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
									zzMarkedPos -= (count-2); //yypushback(count-2);
									yybegin(INTAG_CHECK_TAG_NAME);
          }
        case 104: break;
        case 30: 
          { addToken(Token.SEPARATOR);
          }
        case 105: break;
        case 29: 
          { addToken(Token.ERROR_STRING_DOUBLE); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 106: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 107: break;
        case 21: 
          { yybegin(JAVASCRIPT); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 108: break;
        case 37: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(YYINITIAL);
          }
        case 109: break;
        case 7: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 110: break;
        case 12: 
          { addToken(Token.OPERATOR);
          }
        case 111: break;
        case 41: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 112: break;
        case 13: 
          { addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 113: break;
        case 56: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 114: break;
        case 52: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 115: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
          }
        case 116: break;
        case 53: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 117: break;
        case 1: 
          { 
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case INTAG_CHECK_TAG_NAME: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 614: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 615: break;
            case INTAG_SCRIPT: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG_SCRIPT); return firstToken;
            }
            case 616: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 617: break;
            case INATTR_DOUBLE_SCRIPT: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT); return firstToken;
            }
            case 618: break;
            case INATTR_SINGLE_SCRIPT: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT); return firstToken;
            }
            case 619: break;
            case DTD: {
              addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
            }
            case 620: break;
            case INATTR_SINGLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_SINGLE); return firstToken;
            }
            case 621: break;
            case INATTR_DOUBLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_DOUBLE); return firstToken;
            }
            case 622: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 623: break;
            case INTAG: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 624: break;
            case COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 625: break;
            case JAVASCRIPT: {
              addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 626: break;
            case PI: {
              addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
            }
            case 627: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
